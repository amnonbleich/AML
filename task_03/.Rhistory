install.packages("devtools")
install.packages("devtools")
source("https://bioconductor.org/biocLite.R")  # Install Bioconductor
biocLite(c("Biostrings","iterators","ade4"))                                     # Install required packages
devtools::install_github("crarlus/paprbag") # install paprbag
library(paprbag)
library(randomForest)
install.packages("randomForest")
library(randomForest)
data('trainigData')
library(paprbag)
data('trainigData')
data('trainingData')
set.seed(42)  # set seed to get always the same random numbers
postive_samples_positions<-sample.int(100,50)       #get 50 randomly chosen postiv labled datapoints
negative_samples_positions<-sample.int(100,50)+100  #get 50 randomly chosen negativ labled datapoints
trainingselection<- rep(F,200)  # Creats a vector with 200 FALSE entries
trainingselection[postive_samples_positions]<-TRUE
trainingselection[negative_samples_positions]<-TRUE
data_training<-trainingData[trainingselection,]
data_test<-trainingData[!trainingselection,]
trainingData[-1,]
View(trainingData[-1,])
View(trainingData[,-1])
View(trainingData)
rf <- randomForest(data_training$label ~ ., data=data_training[,-1])
rf <- randomForest(label ~ ., data=data_training[,-1])
rf <- randomForest(label ~ ., data=data_training)
View(data_training)
rf <- randomForest(Labels ~ ., data=data_training)
print(rf$confusion)
print(rf)
print (rf_model$confusion)
rf_model <- randomForest(Labels ~ ., data=data_training)
print (rf_model$confusion)
model_test <- predict(rf_model,data=data_test)
model_test
library(sensitivity)
install.packages("sensitivity")
library(sensitivity)
sensiitivity(data=model_test,reference=data_test[,1])
sensitivity(data=model_test,reference=data_test[,1])
sensitivity::sensitivity
sensitivity
install.packages("sensitivity")
install.packages("sensitivity")
librar(caret)
library(caret)
install.packages("caret")
library(caret)
print(rf_model)
rf_model <- randomForest(Labels ~ ., data=data_training)
library(paprbag)
library(randomForest)
library(paprbag)
library(randomForest)
data('trainingData')
set.seed(42)  # set seed to get always the same random numbers
postive_samples_positions<-sample.int(100,50)       #get 50 randomly chosen postiv labled datapoints
negative_samples_positions<-sample.int(100,50)+100  #get 50 randomly chosen negativ labled datapoints
trainingselection<- rep(F,200)  # Creats a vector with 200 FALSE entries
trainingselection[postive_samples_positions]<-TRUE
trainingselection[negative_samples_positions]<-TRUE
data_training<-trainingData[trainingselection,]
data_test<-trainingData[!trainingselection,]
rf_model <- randomForest(Labels ~ ., data=data_training)
print (rf_model$confusion)
rf_model
library(caret)
caret::confusionMatrix
caret::confusionMatrix(1,1)
install.packages("caret",
repos = "http://cran.r-project.org",
dependencies = c("Depends", "Imports", "Suggests"))
print (rf_model$confusion)
rf_model$proximity
rf_model$test
?randomForest
rf_model <- randomForest(Labels ~ ., data=data_training,xtest=data_test)
rf_model <- randomForest(Labels ~ ., data=data_training,xtest=data_training)
rf_model <- randomForest(Labels ~ ., data=data_training,subset = trainingselection)
rf_model <- randomForest(Labels ~ ., data=data_training,subset = postive_samples_positions)
rf_model$test
rf_model$confusion
print (rf_model$confusion)
rf_model <- randomForest(Labels ~ ., data=data_training)
rf_model
data_test[,-1]
View(data_test[,-1])
rf_model <- randomForest(Labels ~ ., data=data_training,xtest=data_test[,-1],ytest=data_test[,1])
rf_model$test
print(rf_model$test)
print(rf_model)
rf_model$predicted
rf_model$y
print(rf_model)
print(rf_model$confusion)
print(rf_model$test)
print(rf_model$err.rate)
print(rf_model$localImportance)
print(rf_model$test)
print(rf_model)
rf_model$test$confusion
print("asdf",3)
mean(c(0.24,0.36))
print (paste("Confusion",rf_model$confusion))
rf_model$test$confusion$class.error
rf_model$test$confusion[,3]
print("Training Set")
print(paste("Training set error:",mean(rf_model$confusion[,3])))
print(rf_model$confusion)
print("Test Set")
print(paste("Test set error:",mean(rf_model$test$confusion[,3])))
print(rf_model$confusion)
message("asdf")
print_results <- function (x)
{
print("Training Set")
print(paste("Training set error:",mean(x$confusion[,3])))
print(x$confusion)
print("Test Set")
print(paste("Test set error:",mean(x$test$confusion[,3])))
print(x$confusion)
}
print_results(rf_model)
string(1)
as.string(2)
as.character(2)
cat(2)
print_results <- function (x)
{
cat("Training Set")
cat(paste("Training set error:",mean(x$confusion[,3])))
cat(x$confusion)
cat("Test Set")
cat(paste("Test set error:",mean(x$test$confusion[,3])))
cat(x$confusion)
}
print_results(rf_model)
print_results <- function (x)
{
cat("Training Set\n")
cat(paste("Training set error:",mean(x$confusion[,3],'\n')))
print(x$confusion)
cat("Test Set")
cat(paste("Test set error:",mean(x$test$confusion[,3])))
print(x$confusion)
}
print_results(rf_model)
cat("Training Set\n")
cat(paste("Training set error:"))
print_results <- function (x)
{
cat("Training Set\n")
cat(paste("Training set error:",mean(x$confusion[,3],'\n')))
print(x$confusion)
cat("Test Set")
cat(paste("Test set error:",mean(x$test$confusion[,3])))
print(x$confusion)
}
print_results(rf_model)
rf_model$confusion[,3]
microarry_data <- read.csv('./data/crc_220_microarray.txt', sep='\t')
setwd('C:/Users/Ben/Documents/Uni/Master/aml/AML/task_03/')
microarry_data <- read.csv('./data/crc_220_microarray.txt', sep='\t')
rename<-function(elem)
{
return(paste0(strsplit(elem,'\\.')[[1]][1:3], collapse = '-'))
}
microarray_matrix<- as.matrix(microarry_data[(-1:-2)])
microarray_matrix_filtered<-microarray_matrix[(num_na<1),]
microarray_matrix_filtered<-microarray_matrix[(num_na<1),]
num_na<- apply(microarray_matrix,1,sum_na)
sum_na <- function (row)
{
return(sum(is.na(row)))
}
num_na<- apply(microarray_matrix,1,sum_na)
microarray_matrix_filtered<-microarray_matrix[(num_na<1),]
colnames(microarray_matrix_filtered)
lapply(colnames(microarray_matrix_filtered),rename)
vapply(colnames(microarray_matrix_filtered),rename)
apply(colnames(microarray_matrix_filtered),rename)
apply(colnames(microarray_matrix_filtered),1,rename)
apply(colnames(microarray_matrix_filtered),2,rename)
spply(colnames(microarray_matrix_filtered),2,rename)
sapply(colnames(microarray_matrix_filtered),rename)
rename<-function(elem)
{
return(paste0(strsplit(elem,'\\.',3)[[1]], collapse = '-'))
}
sapply(colnames(microarray_matrix_filtered),rename)
strsplit("TCGA.AG.4007.01A.01R.1119.07"",'\\.',3)
)
""
strsplit("TCGA.AG.4007.01A.01R.1119.07",'\\.',3)
strsplit("TCGA.AG.4007.01A.01R.1119.07",'\\.')
?strsplit
rename<-function(elem)
{
return(paste0(strsplit(elem,'\\.',3)[[1]][1:3], collapse = '-'))
}
sapply(colnames(microarray_matrix_filtered),rename)
rename<-function(elem)
{
return(paste0(strsplit(elem,'\\.')[[1]][1:3], collapse = '-'))
}
sapply(colnames(microarray_matrix_filtered),rename)
newnames<- data.frame(matrixLabels=colnames(microarray_matrix_filtered),annotationname=sapply(colnames(microarray_matrix_filtered),rename))
newnames
?merge
color_key<-function(patient)
{
return(ifelse(labels[which(labels[,1]==patient)[1],2],"blue","red"))}
labels <- read.csv('./data/crc_patients_all.txt', sep='\t')
View(labels)
merge(newnames,labels,by.x = newnames$annotationname)
merge(newnames,labels,by.x = annotationname)
merge(newnames,labels,by.x = 'annotationname')
merge(newnames,labels,by.x = 'annotationname',by.y = 'patient')
merged <-merge(newnames,labels,by.x = 'annotationname',by.y = 'patient')
colnames(microarray_matrix_filtered)[1:4]
View(merged)
View(labels)
?sort
merged<- merged[order(merged$matrixLabels),]
View(merged)
plot(pca[comp2],pca[comp2],col=ifelse(merged$cancer[order(colnames(microarray_matrix_filtered))]=='Colon','red','blue'))
pca <- prcomp(t(microarray_matrix_filtered),center=T,scale=T)
newnames<- data.frame(matrixLabels=colnames(microarray_matrix_filtered),annotationname=sapply(colnames(microarray_matrix_filtered),rename))
merged <-merge(newnames,labels,by.x = 'annotationname',by.y = 'patient')
#sort merged
merged<- merged[order(merged$matrixLabels),]
pca_plot<- function (comp1, comp2)
{
plot(pca[comp2],pca[comp2],col=ifelse(merged$cancer[order(colnames(microarray_matrix_filtered))]=='Colon','red','blue'))
}
pca_plot(1,2)
plot(pca$x[1],pca$x[2],col=ifelse(merged$cancer[order(colnames(microarray_matrix_filtered))]=='Colon','red','blue'))
pca$x
pca$x[1]
pca$x[[1]]
pca[[1]]
pca[[2]]
pca$x
plot(pca)
plot(pca[[1]],pca[[2]])
plot(pca[1],pca[2])
?prcomp
?pca
??pca
biplot
biplot(pca)
biplot(pca)
plot(pca$x[,1:2])
plot(pca$x[,1:2],col=ifelse(merged$cancer[order(colnames(microarray_matrix_filtered))]=='Colon','red','blue'))
plot(pca$x[,c(1,3)],col=ifelse(merged$cancer[order(colnames(microarray_matrix_filtered))]=='Colon','red','blue'))
plot(pca$x[,c(2,3)],col=ifelse(merged$cancer[order(colnames(microarray_matrix_filtered))]=='Colon','red','blue'))
plot(pca$x[,c(1,3)],col=ifelse(merged$cancer[order(colnames(microarray_matrix_filtered))]=='Colon','red','blue'))
plot(pca$x[,c(1,2)],col=ifelse(merged$cancer[order(colnames(microarray_matrix_filtered))]=='Colon','red','blue'))
pca <- prcomp((microarray_matrix_filtered),center=T,scale=T)
plot(pca$x[,1:2],col=ifelse(merged$cancer[order(colnames(microarray_matrix_filtered))]=='Colon','red','blue'))
plot(pca$x[,c(1,3)],col=ifelse(merged$cancer[order(colnames(microarray_matrix_filtered))]=='Colon','red','blue'))
plot(pca$x[,c(2,3)],col=ifelse(merged$cancer[order(colnames(microarray_matrix_filtered))]=='Colon','red','blue'))
plot(pca$x[,c(1,2)],col=ifelse(merged$cancer[order(colnames(microarray_matrix_filtered))]=='Colon','red','blue'))
pca <- prcomp(t(microarray_matrix_filtered),center=T,scale=T)
{
plot(pca$x[,comp],col=ifelse(merged$cancer[order(colnames(microarray_matrix_filtered))]=='Colon','red','blue'))
}
pca_plot<- function (comp)
{
plot(pca$x[,comp],col=ifelse(merged$cancer[order(colnames(microarray_matrix_filtered))]=='Colon','red','blue'))
}
pca_plot(c(1,4))
pca[,1]
pca$x[,1]
pca_plot(c(2,4))
pca_plot(c(3,4))
pca_plot(c(4,4))
pca_plot(c(4,5))
pca_plot(c(3,5))
pca_plot(c(2,5))
pca_plot(c(1,5))
clinical_data <- read.csv('./data/crc_clinical_sheet.txt', sep='\t')
View(clinical_data)
merged <-merge(newnames,clinical_data,by.x = 'annotationname',by.y = 'patient')
#sort merged
merged<- merged[order(merged$matrixLabels),]
merged$gender[1]
pca_plot<- function (comp)
{
plot(pca$x[,comp],col=ifelse(merged$gender[order(colnames(microarray_matrix_filtered))]=='MALE','red','blue'))
}
pca_plot(c(1,2))
