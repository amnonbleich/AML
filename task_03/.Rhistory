{
cat("Training Set\n")
cat(paste("Training set error:",mean(x$confusion[,3],'\n')))
print(x$confusion)
cat("Test Set")
cat(paste("Test set error:",mean(x$test$confusion[,3])))
print(x$confusion)
}
print_results(rf_model)
rf_model$confusion[,3]
setwd('C:/Users/Ben/Documents/Uni/Master/aml/AML/task_03/')
source('./pca-utils.r')
source('./pls-varimp.r')
microarry_data <- read.csv('./data/crc_220_microarray.txt', sep='\t')
labels <- read.csv('./data/crc_patients_all.txt', sep='\t')
clinical_data <- read.csv('./data/crc_clinical_sheet.txt', sep='\t')
num_na<- apply(microarray_matrix,1,sum_na)
microarray_matrix_filtered<-microarray_matrix[(num_na<1),]
sum_na <- function (row)
{
return(sum(is.na(row)))
}
num_na<- apply(microarray_matrix,1,sum_na)
microarray_matrix<- as.matrix(microarry_data[(-1:-2)])
rownames(microarray_matrix)<-microarry_data$CLID
sum_na <- function (row)
{
return(sum(is.na(row)))
}
num_na<- apply(microarray_matrix,1,sum_na)
microarray_matrix_filtered<-microarray_matrix[(num_na<1),]
pca <- prcomp(t(microarray_matrix_filtered),center=T,scale=T)
View(splom_pca)
splom_pca(pca)
names(pca$x)
colnames(pca$x)
rownames(pca$x)
?splom_pca
?splom_pca
rename<-function(elem)
{
return(paste0(strsplit(elem,'\\.')[[1]][1:3], collapse = '-'))
}
newnames<- data.frame(matrixLabels=colnames(microarray_matrix_filtered),annotationname=sapply(colnames(microarray_matrix_filtered),rename))
merged <-merge(newnames,clinical_data,by.x = 'annotationname',by.y = 'patient')
#sort merged
merged<- merged[order(merged$matrixLabels),]
merged
head(merged)
View(merged)
colors<- ifelse(merged$cancer[order(rownames(pca$x))]=="Colon",'red','blue')
splom_pca(pca, col=colors)
screeplot_percent(pca)
pca <- prcomp((microarray_matrix_filtered),center=T,scale=T)
screeplot_percent(pca)
colors<- ifelse(merged$cancer[order(rownames(pca$x))]=="Colon",'red','blue')
splom_pca(pca, col=colors)
pc1<- pca$rotation[order(abs(pca$rotation[,1]),decreasing = T)[1:5],1]
names(pc1)
pca$rotation[,1]
min(pca$rotation[,1])
max(pca$rotation[,1])
max(pca$rotation[,2])
min(pca$rotation[,2])
View(microarry_data)
View(microarry_data)
View(microarry_data)
View(microarry_data)
test<- scale(microarray_matrix)
pcat<- pca(t(test))
pcat<- prcomp(t(test))
test<- scale(microarray_matrix_filtered)
pcat<- prcomp(t(test))
screeplot_percent(pcat)
?? apply
scale(c(1,2,3,4))
var(scale(c(1,2,3,4)))
mean(scale(c(1,2,3,4)))
density(scale(c(1,2,3,4)))
plot(density(scale(c(1,2,3,4))))
screeplot_percent(pca)
pca <- prcomp(t(microarray_matrix_filtered),center=T,scale=T)
pca <- prcomp(t(microarray_matrix_filtered),center=T,scale=T)
screeplot_percent(pca)
splom_pca(pca, col=colors)
?cor
setwd('C:/Users/Ben/Documents/Uni/Master/aml/AML/task_03/')
setwd('C:/Users/Ben/Documents/Uni/Master/aml/AML/task_03/')
# load the give scripts
source('./pca-utils.r')
source('./pls-varimp.r')
# load the datafiles
microarry_data <- read.csv('./data/crc_220_microarray.txt', sep='\t')
labels <- read.csv('./data/crc_patients_all.txt', sep='\t')
clinical_data <- read.csv('./data/crc_clinical_sheet.txt', sep='\t')
# data preprocessing
# we create a matrix with the expression values
microarray_matrix<- as.matrix(microarry_data[(-1:-2)])
# add the gene names to the matrix
rownames(microarray_matrix)<-microarry_data$CLID
# function that gets a vector and returns the number of NA in it
sum_na <- function (row)
{
return(sum(is.na(row)))
}
# create a vector with the number of NAs for each gene (row)
num_na<- apply(microarray_matrix,1,sum_na)
sum(num_na==1) #
sum(num_na==0) #
microarray_matrix_filtered<-microarray_matrix[(num_na==0),]
variance<-apply(microarray_matrix_filtered,1,var,na.rm=T)
top_var<-microarray_matrix_filtered[variance>5,]
plot(density(top_var[1,]),xlim=c(-14,10),ylim=c(0,0.4),lwd=2,main='Density of Genes (Top Variance) without NA and with variance >5',xlab="Expression-Value",col=rainbow(16)[1])
for (i in 2:16)
{lines(density(top_var[i,],na.rm = T),col=rainbow(16)[i],lwd=2)}
plot(density(top_var[1,]),xlim=c(-14,10),ylim=c(0,0.4),lwd=2,main='Density of Genes (Top Variance) without NA and with variance >5',xlab="Expression-Value",col=rainbow(7)[1])
for (i in 2:7)
{lines(density(top_var[i,],na.rm = T),col=rainbow(7)[i],lwd=2)}
plot(density(top_var[1,]),xlim=c(-10,10),ylim=c(0,0.4),lwd=2,main='Density of Genes (Top Variance) without NA and with variance >5',xlab="Expression-Value",col=rainbow(7)[1])
for (i in 2:7)
{lines(density(top_var[i,],na.rm = T),col=rainbow(7)[i],lwd=2)}
pca <- prcomp(t(microarray_matrix_filtered),center=T,scale=T)
screeplot_percent(pca)
pc1<- pca$rotation[order(abs(pca$rotation[,1]),decreasing = T)[1:5],1]
pc1
pc2<- pca$rotation[order(abs(pca$rotation[,1]),decreasing = T)[1:5],2]
pc2
# The function converts name in the expression for the patients to the format in the clinical dataset
rename<-function(elem)
{
return(paste0(strsplit(elem,'\\.')[[1]][1:3], collapse = '-'))
}
# get alternitive names for the patients and create a dataframe with originale name and the new name
newnames<- data.frame(matrixLabels=colnames(microarray_matrix_filtered),annotationname=sapply(colnames(microarray_matrix_filtered),rename))
# merge the new names of patients with the names in the clinical dataset
merged <-merge(newnames,clinical_data,by.x = 'annotationname',by.y = 'patient')
# sort the dataset in lexicographic order for the old names -> makes coloring easier
merged<- merged[order(merged$matrixLabels),]
colors<- ifelse(merged$cancer[order(rownames(pca$x))]=="Colon",'red','blue')
splom_pca(pca, col=colors)
cancerTypeAsFactor<-merged$cancer[order(rownames(pca$x))]
class(cancerTypeAsFactor)
cor_mat<-cor(microarray_matrix, y = cancerTypeAsFactor)
as.numeric(cancerTypeAsFactor)
cor_mat<-cor(microarray_matrix, y = as.numeric(cancerTypeAsFactor))
cor_mat<-cor(t(microarray_matrix), y = as.numeric(cancerTypeAsFactor))
cor_mat
cor_mat<-cor(t(microarray_matrix_filtered), y = as.numeric(cancerTypeAsFactor))
cor_mat
max(cor_mat)
min(cor_mat)
library(pls)
require(pls)
install.packages("pls")
require(pls)
?pls
??pls
plsr
?plsr
plsrobj<- plsr(Y.add=cancerTypeAsFactor,data=t(microarray_matrix_filtered), ncomp=10)
plsrobj<- plsr(y~ .,Y.add=cancerTypeAsFactor,data=t(microarray_matrix_filtered), ncomp=10)
plsrobj<- plsr(y~ t(microarray_matrix_filtered).,Y.add=cancerTypeAsFactor, ncomp=10,scale=T)
plsrobj<- plsr(cancerTypeAsFactor~. ,data=t(microarray_matrix_filtered), ncomp=10,scale)
as.data.frame(microarray_matrix_filtered)
plsrobj<- plsr(cancerTypeAsFactor~. ,data=as.data.frame(t(microarray_matrix_filtered)), ncomp=10,scale)
plsrobj<- plsr(cancerTypeAsFactor~ . ,data=as.data.frame(t(microarray_matrix_filtered)), ncomp=10,scale)
cancerTypedummy<-ifelse(merged$cancer[order(rownames(pca$x))]=='Colon',1,0)
cor_mat<-cor(t(microarray_matrix_filtered), y = as.numeric(cancerTypeAsFactor))
max(cor_mat) # 0.5037711
min(cor_mat) # -0.3999388
cor_mat<-cor(t(microarray_matrix_filtered), y = cancerTypedummy)
max(cor_mat) # 0.5037711
min(cor_mat) # -0.3999388
plsrobj<- plsr(cancerTypedummy ~ t(microarray_matrix_filtered), ncomp=10,scale)
plsrobj<- plsr(cancerTypedummy ~ t(microarray_matrix_filtered), ncomp=10,scale=T)
splom_pca(plsrobj, col=colors)
?plsr
crossval(plsrobj)
plsrobj<- plsr(cancerTypedummy ~ t(microarray_matrix_filtered), ncomp=10,scale=T, validation='CV')
crossval(plsrobj)
plsrobj<- plsr(cancerTypedummy ~ t(microarray_matrix_filtered), ncomp=10,scale=T, validation='CV',segments=10)
plsrobj
summary(plsrobj)
plsrobj<- plsr(cancerTypedummy ~ t(microarray_matrix_filtered), ncomp=10,scale=T, validation='CV',segments=10, segment.type="consecutive")
summary(plsrobj)
plsrobj$validation$pred
?predict
predict(plsrobj)
predict(plsrobj, microarray_matrix_filtered[1])
require(glmnet)
install.packages("glmnet")
install.packages("ROCR")
require(ROCR)
plot(plsrobj)
??ROCR
plsrobj<- plsr(cancerTypedummy ~ t(microarray_matrix_filtered), ncomp=10,scale=T, validation='CV',segments=10, segment.type="consecutive",center=T)
plsrobj$validation
plsrobj$validation$pred
View(plsrobj$validation$pred)
plot(plsrobj)
plot(RMSEP(plsrobj))
t(microarray_matrix_filtered)
t(microarray_matrix_filtered)[1:10,]
View(t(microarray_matrix_filtered)[1:10,])
plsrobj<- plsr(cancerTypedummy[11:220] ~ t(microarray_matrix_filtered)[11:220], ncomp=10,scale=T, validation='CV',segments=10, segment.type="consecutive",center=T)
plsrobj<- plsr((cancerTypedummy[11:220]) ~ (t(microarray_matrix_filtered)[11:220]), ncomp=10,scale=T, validation='CV',segments=10, segment.type="consecutive",center=T)
plsrobj<- plsr(trainres ~train , ncomp=10,scale=T, validation='CV',segments=10, segment.type="consecutive",center=T)
trainres<-cancerTypedummy[11:220]
train<-t(microarray_matrix_filtered)[11:220]
plsrobj<- plsr(trainres ~train , ncomp=10,scale=T, validation='CV',segments=10, segment.type="consecutive",center=T)
plsrobj<- plsr(trainres ~train , ncomp=5,scale=T, validation='CV',segments=10, segment.type="consecutive",center=T)
plsrobj<- plsr(cancerTypedummy ~ t(microarray_matrix_filtered), ncomp=10,scale=T, validation='CV',segments=10, segment.type="consecutive",center=T)
Y<-cancerTypedummy
X<-t(microarray_matrix_filtered)
plsrobj<- plsr(X ~ Y, ncomp=10,scale=T, validation='CV',segments=10, segment.type="consecutive",center=T)
plsrobj<- plsr(Y ~ X, ncomp=10,scale=T, validation='CV',segments=10, segment.type="consecutive",center=T)
X<-t(microarray_matrix_filtered)[11:220]
plsrobj<- plsr(Y ~ X, ncomp=10,scale=T, validation='CV',segments=10, segment.type="consecutive",center=T)
Y<-cancerTypedummy[11:220]
X<-t(microarray_matrix_filtered)[11:220]
plsrobj<- plsr(Y ~ X, ncomp=10,scale=T, validation='CV',segments=10, segment.type="consecutive",center=T)
X<-t(microarray_matrix_filtered)[11:220,]
plsrobj<- plsr(Y ~ X, ncomp=10,scale=T, validation='CV',segments=10, segment.type="consecutive",center=T)
test<-t(microarray_matrix_filtered)[1:10,]
test<-t(microarray_matrix_filtered)[1:10,]
predict(plsrobj,test)
??ROCR
?performance
performance(plsrobj,'sens','spec')
performance(predict(plsrobj),'sens','spec')
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred,"tpr","fpr")
plot(perf)
library(ROCR)
data(ROCR.simple)
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred,"tpr","fpr")
plot(perf)
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred,"sens","spec")
plot(perf)
class(pred)
prediction(plsrobj,test)
?prediction
prediction(plsrobj$projection,Y)
Y<-cancerTypedummy
X<-t(microarray_matrix_filtered)
plsrobj<- plsr(Y ~ X, ncomp=10,scale=T, validation='CV',segments=10, segment.type="consecutive",center=T)
prediction(plsrobj$projection,Y)
prediction(plsrobj$validation,Y)
prediction(plsrobj$validation$pred,Y)
prediction(plsrobj$validation$pred[,1],Y)
prediction(plsrobj$validation$pred[1,],Y)
view(plsrobj$validation$pred[1,])
View(plsrobj$validation$pred[1,])
View(plsrobj$validation$pred)
View(plsrobj$validation$pred[1])
View(plsrobj$validation$pred[1,])
View(plsrobj$validation$pred[1:100])
glmnet(X,Y)
library(glmnet)
glmnet(X,Y)
glm<-glmnet(X,Y)
predict<-predict(glm,x)
predict<-predict(glm,X)
predicte<-predict(glm,X)
predicte
predicte<-ifelse(predict(glm,X)<=0.5,0,1)
perf <- performance(predicte,Y)
perf <- prediction(predicte,Y)
dim(predict)
dim(predicte)
View(predicte)
View(predicte[,1])
perf <- prediction(predicte[,1],Y)
prediction(perf,X)
class(perf)
perf <- prediction(predicte[,1],Y)
performance(perf,'sen','spec')
performance(perf,'sens','spec')
plot(performance(perf,'sens','spec'))
pls_regression- plsr(cancerTypedummy ~ t(microarray_matrix_filtered), ncomp=10,scale=T, validation='CV',segments=10, segment.type="consecutive",center=T)
pls_regression<- plsr(cancerTypedummy ~ t(microarray_matrix_filtered), ncomp=10,scale=T, validation='CV',segments=10, segment.type="consecutive",center=T)
lasso_regression <- glmnet(t(microarray_matrix_filtered), cancerTypedummy, family="gaussian", alpha=1)
pc_regression <- pcr(cancerTypedummy ~ t(microarray_matrix_filtered), ncomp=6, validation="CV",scale=T,center=T)
lasso.prob <- predict(lasso.regression, type="response", newx=t(microarray_matrix_filtered))
lasso.prob <- predict(lasso_regression, type="response", newx=t(microarray_matrix_filtered))
lasso.prob <- predict(lasso_regression, type="response", newx=t(microarray_matrix_filtered))
lasso.pred <- prediction(lasso.prob[,1], cancerTypedummy)
lasso.perf1 <- performance(lasso.pred, "tpr", "fpr")
plot(lasso.perf1, main="ROC curve for lasso")
plot(lasso.perf3, main="sensitivity/specificity curve for lasso")
lasso.perf3 <- performance(lasso.pred, "sens", "spec")
plot(lasso.perf3, main="sensitivity/specificity curve for lasso")
lasso_prob <- predict(lasso_regression, type="response", newx=t(microarray_matrix_filtered))
lasso_pred <- prediction(lasso_prob[,1], cancerTypedummy)
lasso.perf1 <- performance(lasso_pred, "tpr", "fpr")
png("plot-2.4-lasso1.png")
plot(lasso.perf1, main="ROC curve for lasso")
dev.off()
lasso.perf2 <- performance(lasso_pred, "prec", "rec")
png("plot-2.4-lasso2.png")
plot(lasso.perf2, main="precision/recall curve for lasso")
dev.off()
lasso.perf3 <- performance(lasso_pred, "sens", "spec")
png("plot-2.4-lasso3.png")
plot(lasso.perf3, main="sensitivity/specificity curve for lasso")
dev.off()
pcr_prob <- predict(pc_regression, type="response", newx=t(microarray_matrix_filtered))
pcr.pred <- prediction(pcr_prob[1:220], cancerTypedummy)
pcr_prob <- predict(pc_regression, type="response", newx=t(microarray_matrix_filtered))
pcr_pred <- prediction(pcr_prob[1:220], cancerTypedummy)
pcr_perf1 <- performance(pcr_pred, "tpr", "fpr")
png("pcr1.png")
plot(pcr.perf1, main="ROC curve for PCR")
dev.off()
pcr_perf2 <- performance(pcr_pred, "prec", "rec")
png("pcr2.png")
plot(pcr.perf2, main="precision/recall curve for PCR")
dev.off()
pcr_perf3 <- performance(pcr_pred, "sens", "spec")
png("pcr3.png")
plot(pcr_perf3, main="sensitivity/specificity curve for PCR")
dev.off()
pcr_prob <- predict(pc_regression, type="response", newx=t(microarray_matrix_filtered))
pcr_pred <- prediction(pcr_prob[1:220], cancerTypedummy)
pcr_perf1 <- performance(pcr_pred, "tpr", "fpr")
png("pcr1.png")
plot(pcr_perf1, main="ROC curve for PCR")
dev.off()
pcr_perf2 <- performance(pcr_pred, "prec", "rec")
png("pcr2.png")
plot(pcr_perf2, main="precision/recall curve for PCR")
dev.off()
pcr_perf3 <- performance(pcr_pred, "sens", "spec")
png("pcr3.png")
plot(pcr_perf3, main="sensitivity/specificity curve for PCR")
dev.off()
pls_prob <- predict(pls.regression, type="response", newx=t(microarray_matrix_filtered))
pls_pred <- prediction(pls.prob[1:220], cancerTypedummy)
pls_perf1 <- performance(pls_pred, "tpr", "fpr")
png("pls1.png")
plot(pls_perf1, main="ROC curve for pls")
dev.off()
pls_perf2 <- performance(pls.pred, "prec", "rec")
png("pls2.png")
plot(pls_perf2, main="precision/recall curve for pls")
dev.off()
pls_perf3 <- performance(lasso.pred, "sens", "spec")
png("pls3.png")
plot(pls_perf3, main="sensitivity/specificity curve for lasso")
dev.off()
pls_prob <- predict(pls_regression, type="response", newx=t(microarray_matrix_filtered))
pls_pred <- prediction(pls_prob[1:220], cancerTypedummy)
pls_perf1 <- performance(pls_pred, "tpr", "fpr")
png("pls1.png")
plot(pls_perf1, main="ROC curve for pls")
dev.off()
pls_perf2 <- performance(pls.pred, "prec", "rec")
png("pls2.png")
pls_perf2 <- performance(pls_pred, "prec", "rec")
png("pls2.png")
plot(pls_perf2, main="precision/recall curve for pls")
dev.off()
pls_perf3 <- performance(lasso_pred, "sens", "spec")
png("pls3.png")
par(mfrow=c(1,3))
plot(lasso_perf1, main="ROC curve for lasso")
plot(pcr_perf1, main="ROC curve for PCR")
plot(pls_perf1, main="ROC curve for pls")
lasso_perf1 <- performance(lasso_pred, "tpr", "fpr")
plot(lasso_perf1, main="ROC curve for lasso")
lasso_perf1 <- performance(lasso_pred, "tpr", "fpr")
pcr_perf1 <- performance(pcr_pred, "tpr", "fpr")
pls_perf1 <- performance(pls_pred, "tpr", "fpr")
plot(lasso_perf1, main="ROC curve for lasso")
plot(pcr_perf1, main="ROC curve for PCR")
plot(pls_perf1, main="ROC curve for pls")
par(mfrow=c(1,3))
plot(lasso_perf1, main="ROC curve for lasso")
plot(pcr_perf1, main="ROC curve for PCR")
plot(pls_perf1, main="ROC curve for pls")
plot(lasso_perf1, main="ROC curve for lasso")
plot(pcr_perf1, main="ROC curve for PCR")
plot(pls_perf1, main="ROC curve for pls")
pls_perf1 <- performance(pls_pred, "tpr", "fpr")
png("pls1.png")
plot(pls_perf1, main="ROC curve for pls")
dev.off()
dev.off()
dev.off()
par(mfrow=c(1,3))
plot(lasso_perf1, main="ROC curve for lasso")
plot(pcr_perf1, main="ROC curve for PCR")
plot(pls_perf1, main="ROC curve for pls")
lasso_perf2 <- performance(lasso_pred, "prec", "rec")
pcr_perf2 <- performance(pcr_pred, "prec", "rec")
pls_perf2 <- performance(pls_pred, "prec", "rec")
par(mfrow=c(1,3))
plot(lasso_perf2, main="precision/recall curve for lasso")
plot(pcr_perf2, main="precision/recall curve for PCR")
plot(pls_perf2, main="precision/recall curve for pls")
plot(lasso_perf2, main="precision/recall curve for lasso")
lasso_perf2 <- performance(lasso_pred, "sens", "spec")
pcr_perf2 <- performance(pcr_pred, "sens", "spec")
pls_perf2 <- performance(pls_pred, "sens", "spec")
png("sens_spec.png")
par(mfrow=c(1,3))
plot(lasso_perf2, main="sensitivity/specificity for lasso")
plot(pcr_perf2, main="sensitivity/specificity for PCR")
plot(pls_perf2, main="sensitivity/specificity for pls")
dev.off()
colors<- ifelse(merged$gender[order(rownames(pca$x))]=="Male",'lightblue','pink')
colors2<- ifelse(merged$gender[order(rownames(pca$x))]=="Male",'lightblue','pink')
splom_pca(pca, npcs = 6, col = colors2)
View(merged)
colors2<- ifelse(merged$gender[order(rownames(pca$x))]=="MALE",'lightblue','pink')
splom_pca(pca, npcs = 6, col = colors2)
splom_pca(pca, npcs = 5, col = colors2)
rampcolor
a<-colorRampPalette(c("black", "white"))
a(20)
max(merged$age_at_initial_pathologic_diagnosis)
min(merged$age_at_initial_pathologic_diagnosis)
90-35
ramp <- colorRampPalette(c("orange", "blue"))
colors3<- ramp(58)[merged$age_at_initial_pathologic_diagnosis[order(rownames(pca$x))]-34]
splom_pca(pca, npcs = 5, col = colors3)
par(mfrow=C(1,1))
par(mfrow=c(1,1))
require(pls)
require(glmnet)
require(ROCR)
source('./pca-utils.r')
source('./pls-varimp.r')
microarry_data <- read.csv('./data/crc_220_microarray.txt', sep='\t')
labels <- read.csv('./data/crc_patients_all.txt', sep='\t')
clinical_data <- read.csv('./data/crc_clinical_sheet.txt', sep='\t')
microarray_matrix<- as.matrix(microarry_data[(-1:-2)])
rownames(microarray_matrix)<-microarry_data$CLID
sum_na <- function (row)
{
return(sum(is.na(row)))
}
num_na<- apply(microarray_matrix,1,sum_na)
sum(num_na==0) # 11910
microarray_matrix_filtered<-microarray_matrix[(num_na==0),]
rename<-function(elem)
{
return(paste0(strsplit(elem,'\\.')[[1]][1:3], collapse = '-'))
}
newnames<- data.frame(matrixLabels=colnames(microarray_matrix_filtered),annotationname=sapply(colnames(microarray_matrix_filtered),rename))
merged <-merge(newnames,clinical_data,by.x = 'annotationname',by.y = 'patient')
merged<- merged[order(merged$matrixLabels),]
variance<-apply(microarray_matrix_filtered,1,var,na.rm=T)
top_var<-microarray_matrix_filtered[variance>5,]
png('densitys.png')
plot(density(top_var[1,]),xlim=c(-10,10),ylim=c(0,0.4),lwd=2,main='Density of Genes (Top Variance) without NA and variance >5',xlab="Expression-Value",col=rainbow(7)[1])
for (i in 2:7)
{lines(density(top_var[i,],na.rm = T),col=rainbow(7)[i],lwd=2)}
dev.off()
pca <- prcomp(t(microarray_matrix_filtered),center=T,scale=T)
png('screeplot.png')
screeplot_percent(pca)
dev.off()
pc1<- pca$rotation[order(abs(pca$rotation[,1]),decreasing = T)[1:5],1]
pc2<- pca$rotation[order(abs(pca$rotation[,1]),decreasing = T)[1:5],2]
colors<- ifelse(merged$cancer[order(rownames(pca$x))]=="Colon",'red','blue')
png('pca_cancer.png')
splom_pca(pca, col=colors)
dev.off()
colors2<- ifelse(merged$gender[order(rownames(pca$x))]=="MALE",'lightblue','pink')
png('pca_gender.png')
splom_pca(pca, npcs = 5, col = colors2)
dev.off()
ramp <- colorRampPalette(c("orange", "blue"))
colors3<- ramp(58)[merged$age_at_initial_pathologic_diagnosis[order(rownames(pca$x))]-34]
png('pca_age.png')
splom_pca(pca, npcs = 5, col = colors3)
dev.off()
cancerTypedummy<-ifelse(merged$cancer[order(rownames(pca$x))]=='Colon',1,0)
cor_mat<-cor(t(microarray_matrix_filtered), y = cancerTypedummy)
max(cor_mat) #  0.3999388
min(cor_mat) # -0.5037711
pls_regression<- plsr(cancerTypedummy ~ t(microarray_matrix_filtered), ncomp=10,scale=T, validation='CV',segments=10, segment.type="consecutive",center=T)
lasso_regression <- glmnet(t(microarray_matrix_filtered), cancerTypedummy, family="gaussian", alpha=1)
pc_regression <- pcr(cancerTypedummy ~ t(microarray_matrix_filtered), ncomp=6, validation="CV",scale=T,center=T)
lasso_prob <- predict(lasso_regression, type="response", newx=t(microarray_matrix_filtered))
lasso_pred <- prediction(lasso_prob[,1], cancerTypedummy)
pcr_prob <- predict(pc_regression, type="response", newx=t(microarray_matrix_filtered))
pcr_pred <- prediction(pcr_prob[1:220], cancerTypedummy)
pls_prob <- predict(pls_regression, type="response", newx=t(microarray_matrix_filtered))
pls_pred <- prediction(pls_prob[1:220], cancerTypedummy)
lasso_perf1 <- performance(lasso_pred, "tpr", "fpr")
pcr_perf1 <- performance(pcr_pred, "tpr", "fpr")
pls_perf1 <- performance(pls_pred, "tpr", "fpr")
png("ROC.png")
par(mfrow=c(1,3))
plot(lasso_perf1, main="ROC curve for lasso")
plot(pcr_perf1, main="ROC curve for PCR")
plot(pls_perf1, main="ROC curve for pls")
dev.off()
lasso_perf2 <- performance(lasso_pred, "sens", "spec")
pcr_perf2 <- performance(pcr_pred, "sens", "spec")
pls_perf2 <- performance(pls_pred, "sens", "spec")
png("sens_spec.png")
par(mfrow=c(1,3))
plot(lasso_perf2, main="sensitivity/specificity for lasso")
plot(pcr_perf2, main="sensitivity/specificity for PCR")
plot(pls_perf2, main="sensitivity/specificity for pls")
dev.off()
pc1
