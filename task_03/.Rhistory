install.packages("devtools")
install.packages("devtools")
source("https://bioconductor.org/biocLite.R")  # Install Bioconductor
biocLite(c("Biostrings","iterators","ade4"))                                     # Install required packages
devtools::install_github("crarlus/paprbag") # install paprbag
library(paprbag)
library(randomForest)
install.packages("randomForest")
library(randomForest)
data('trainigData')
library(paprbag)
data('trainigData')
data('trainingData')
set.seed(42)  # set seed to get always the same random numbers
postive_samples_positions<-sample.int(100,50)       #get 50 randomly chosen postiv labled datapoints
negative_samples_positions<-sample.int(100,50)+100  #get 50 randomly chosen negativ labled datapoints
trainingselection<- rep(F,200)  # Creats a vector with 200 FALSE entries
trainingselection[postive_samples_positions]<-TRUE
trainingselection[negative_samples_positions]<-TRUE
data_training<-trainingData[trainingselection,]
data_test<-trainingData[!trainingselection,]
trainingData[-1,]
View(trainingData[-1,])
View(trainingData[,-1])
View(trainingData)
rf <- randomForest(data_training$label ~ ., data=data_training[,-1])
rf <- randomForest(label ~ ., data=data_training[,-1])
rf <- randomForest(label ~ ., data=data_training)
View(data_training)
rf <- randomForest(Labels ~ ., data=data_training)
print(rf$confusion)
print(rf)
print (rf_model$confusion)
rf_model <- randomForest(Labels ~ ., data=data_training)
print (rf_model$confusion)
model_test <- predict(rf_model,data=data_test)
model_test
library(sensitivity)
install.packages("sensitivity")
library(sensitivity)
sensiitivity(data=model_test,reference=data_test[,1])
sensitivity(data=model_test,reference=data_test[,1])
sensitivity::sensitivity
sensitivity
install.packages("sensitivity")
install.packages("sensitivity")
librar(caret)
library(caret)
install.packages("caret")
library(caret)
print(rf_model)
rf_model <- randomForest(Labels ~ ., data=data_training)
library(paprbag)
library(randomForest)
library(paprbag)
library(randomForest)
data('trainingData')
set.seed(42)  # set seed to get always the same random numbers
postive_samples_positions<-sample.int(100,50)       #get 50 randomly chosen postiv labled datapoints
negative_samples_positions<-sample.int(100,50)+100  #get 50 randomly chosen negativ labled datapoints
trainingselection<- rep(F,200)  # Creats a vector with 200 FALSE entries
trainingselection[postive_samples_positions]<-TRUE
trainingselection[negative_samples_positions]<-TRUE
data_training<-trainingData[trainingselection,]
data_test<-trainingData[!trainingselection,]
rf_model <- randomForest(Labels ~ ., data=data_training)
print (rf_model$confusion)
rf_model
library(caret)
caret::confusionMatrix
caret::confusionMatrix(1,1)
install.packages("caret",
repos = "http://cran.r-project.org",
dependencies = c("Depends", "Imports", "Suggests"))
print (rf_model$confusion)
rf_model$proximity
rf_model$test
?randomForest
rf_model <- randomForest(Labels ~ ., data=data_training,xtest=data_test)
rf_model <- randomForest(Labels ~ ., data=data_training,xtest=data_training)
rf_model <- randomForest(Labels ~ ., data=data_training,subset = trainingselection)
rf_model <- randomForest(Labels ~ ., data=data_training,subset = postive_samples_positions)
rf_model$test
rf_model$confusion
print (rf_model$confusion)
rf_model <- randomForest(Labels ~ ., data=data_training)
rf_model
data_test[,-1]
View(data_test[,-1])
rf_model <- randomForest(Labels ~ ., data=data_training,xtest=data_test[,-1],ytest=data_test[,1])
rf_model$test
print(rf_model$test)
print(rf_model)
rf_model$predicted
rf_model$y
print(rf_model)
print(rf_model$confusion)
print(rf_model$test)
print(rf_model$err.rate)
print(rf_model$localImportance)
print(rf_model$test)
print(rf_model)
rf_model$test$confusion
print("asdf",3)
mean(c(0.24,0.36))
print (paste("Confusion",rf_model$confusion))
rf_model$test$confusion$class.error
rf_model$test$confusion[,3]
print("Training Set")
print(paste("Training set error:",mean(rf_model$confusion[,3])))
print(rf_model$confusion)
print("Test Set")
print(paste("Test set error:",mean(rf_model$test$confusion[,3])))
print(rf_model$confusion)
message("asdf")
print_results <- function (x)
{
print("Training Set")
print(paste("Training set error:",mean(x$confusion[,3])))
print(x$confusion)
print("Test Set")
print(paste("Test set error:",mean(x$test$confusion[,3])))
print(x$confusion)
}
print_results(rf_model)
string(1)
as.string(2)
as.character(2)
cat(2)
print_results <- function (x)
{
cat("Training Set")
cat(paste("Training set error:",mean(x$confusion[,3])))
cat(x$confusion)
cat("Test Set")
cat(paste("Test set error:",mean(x$test$confusion[,3])))
cat(x$confusion)
}
print_results(rf_model)
print_results <- function (x)
{
cat("Training Set\n")
cat(paste("Training set error:",mean(x$confusion[,3],'\n')))
print(x$confusion)
cat("Test Set")
cat(paste("Test set error:",mean(x$test$confusion[,3])))
print(x$confusion)
}
print_results(rf_model)
cat("Training Set\n")
cat(paste("Training set error:"))
print_results <- function (x)
{
cat("Training Set\n")
cat(paste("Training set error:",mean(x$confusion[,3],'\n')))
print(x$confusion)
cat("Test Set")
cat(paste("Test set error:",mean(x$test$confusion[,3])))
print(x$confusion)
}
print_results(rf_model)
rf_model$confusion[,3]
setwd('C:/Users/Ben/Documents/Uni/Master/aml/AML/task_03/')
microarry_data <- read.csv('./data/crc_220_microarray.txt', sep='\t')
labels <- read.csv('./data/crc_patients_all.txt', sep='\t')
clinical_data <- read.csv('./data/crc_clinical_sheet.txt', sep='\t')
# preprocessing
microarray_matrix<- as.matrix(microarry_data[(-1:-2)])
sum_na <- function (row)
{
return(sum(is.na(row)))
}
num_na<- apply(microarray_matrix,1,sum_na)
hist(num_na)
sum(num_na<4)
microarray_matrix_filtered<-microarray_matrix[(num_na<4),]
variance<-apply(microarray_matrix_filtered,1,var,na.rm=T)
plot(variance)
sum(variance>5)
top_var<-microarray_matrix_filtered[variance>5,]
plot(density(top_var[1,]),xlim=c(-10:10))
for (i in 2:16)
{lines(density(top_var[i,]))}
setwd('C:/Users/Ben/Documents/Uni/Master/aml/AML/task_03/')
microarry_data <- read.csv('./data/crc_220_microarray.txt', sep='\t')
labels <- read.csv('./data/crc_patients_all.txt', sep='\t')
clinical_data <- read.csv('./data/crc_clinical_sheet.txt', sep='\t')
# preprocessing
microarray_matrix<- as.matrix(microarry_data[(-1:-2)])
sum_na <- function (row)
{
return(sum(is.na(row)))
}
num_na<- apply(microarray_matrix,1,sum_na)
hist(num_na)
sum(num_na<4)
microarray_matrix_filtered<-microarray_matrix[(num_na<4),]
variance<-apply(microarray_matrix_filtered,1,var,na.rm=T)
plot(variance)
sum(variance>5)
top_var<-microarray_matrix_filtered[variance>5,]
plot(density(top_var[1,]),xlim=c(-10,10))
for (i in 2:16)
{lines(density(top_var[i,]))}
top_var<-microarray_matrix_filtered[variance>5,]
plot(density(top_var[1,]),xlim=c(-10,10))
for (i in 2:16)
{lines(density(top_var[i,]))}
?density
for (i in 2:16)
{lines(density(top_var[i,]),na.rm=T)}
for (i in 2:16)
{lines(density(top_var[i,],na.rm=T))}
for (i in 2:16)
{lines(density(top_var[i,],na.rm=T))}
density(top_var[1,],na.rm=T)
density(top_var[1,],na.rm=T)
density(top_var[1,],na.rm = T)
for (i in 2:16)
{lines(density(top_var[i,],na.rm = T))}
plot(density(top_var[1,]),xlim=c(-10,10))
for (i in 2:16)
{lines(density(top_var[i,],na.rm = T))}
plot(density(top_var[1,]),xlim=c(-10,10),ylim=c(0,0,2))
plot(density(top_var[1,]),xlim=c(-10,10),ylim=c(0,0.2))
for (i in 2:16)
{lines(density(top_var[i,],na.rm = T))}
plot(density(top_var[1,]),xlim=c(-10,10),ylim=c(0,0.4))
for (i in 2:16)
{lines(density(top_var[i,],na.rm = T))}
plot(density(top_var[1,]),xlim=c(-14,10),ylim=c(0,0.4))
for (i in 2:16)
{lines(density(top_var[i,],na.rm = T))}
plot(density(top_var[1,]),xlim=c(-14,10),ylim=c(0,0.4),main='Density of Genes with variance >5',xlab="Expression-Value")
for (i in 2:16)
{lines(density(top_var[i,],na.rm = T))}
rainbow(4)
top_var<-microarray_matrix_filtered[variance>5,]
plot(density(top_var[1,]),xlim=c(-14,10),ylim=c(0,0.4),main='Density of Genes with variance >5',xlab="Expression-Value",color=rainbow(16)[1]
for (i in 2:16)
{lines(density(top_var[i,],na.rm = T),color=rainbow(16)[i])}
?plot
plot(density(top_var[1,]),xlim=c(-14,10),ylim=c(0,0.4),main='Density of Genes with variance >5',xlab="Expression-Value",col=rainbow(16)[1]
for (i in 2:16)
{lines(density(top_var[i,],na.rm = T),col=rainbow(16)[i])}
rainbow(16)
plot(density(top_var[1,]),xlim=c(-14,10),ylim=c(0,0.4),main='Density of Genes with variance >5',xlab="Expression-Value",col=rainbow(16)[1]
for (i in 2:16)
{lines(density(top_var[i,],na.rm = T),col=rainbow(16)[i])}
plot(density(top_var[1,]),xlim=c(-14,10),ylim=c(0,0.4),main='Density of Genes with variance >5',xlab="Expression-Value",col=rainbow(16)[1]
for (i in 2:16)
{lines(density(top_var[i,],na.rm = T),col=rainbow(16)[i])}
plot(density(top_var[1,]),xlim=c(-14,10),ylim=c(0,0.4),main='Density of Genes with variance >5',xlab="Expression-Value",col=rainbow(16)[1]
for (i in 2:16)
{lines(density(top_var[i,],na.rm = T),col=rainbow(16)[i])}
top_var<-microarray_matrix_filtered[variance>5,]
plot(density(top_var[1,]),xlim=c(-14,10),ylim=c(0,0.4),main='Density of Genes with variance >5',xlab="Expression-Value",col=rainbow(16)[1]
for (i in 2:16)
{lines(density(top_var[i,],na.rm = T),col=rainbow(16)[i])}
plot(density(top_var[1,]),xlim=c(-14,10),ylim=c(0,0.4),main='Density of Genes with variance >5',xlab="Expression-Value",col=rainbow(16)[1])
for (i in 2:16)
{lines(density(top_var[i,],na.rm = T),col=rainbow(16)[i])}
plot(density(top_var[1,]),xlim=c(-14,10),ylim=c(0,0.4),lwd=3,main='Density of Genes with variance >5',xlab="Expression-Value",col=rainbow(16)[1])
for (i in 2:16)
{lines(density(top_var[i,],na.rm = T),col=rainbow(16)[i],lwd=3)}
plot(density(top_var[1,]),xlim=c(-14,10),ylim=c(0,0.4),lwd=2,main='Density of Genes with variance >5',xlab="Expression-Value",col=rainbow(16)[1])
for (i in 2:16)
{lines(density(top_var[i,],na.rm = T),col=rainbow(16)[i],lwd=2)}
??pca
rownames(microarray_matrix)<-microarry_data[(1)]
microarry_data[1]
rownames(microarray_matrix)<-microarry_data[1]
dim(microarry_data[1])
dim(microarray_matrix)
nrow(microarray_matrix)
rownames(microarray_matrix)<-as.vector(microarry_data[1])
rownames(microarray_matrix)
dimnames(microarray_matrix)
rownames(microarray_matrix)<-(1:23197)
rownames(microarray_matrix)<-microarry_data$CLID
microarray_matrix<- as.matrix(microarry_data[(-1:-2)])
rownames(microarray_matrix)<-microarry_data$CLID
pca <- prcomp(microarray_matrix_filtered,center=T,scale=T)
View(microarray_matrix_filtered)
microarray_matrix_filtered<-microarray_matrix[(num_na<1),]
pca <- prcomp(microarray_matrix_filtered,center=T,scale=T)
pca[1]
length(pca[1])
pca[1]
length(pca[1])
rotate(pca[1])
pca$rotation[1]
pca$rotation
pca$rotation
head(pca$rotation)
identity(3)
t(identity(3))
?t
a <- matrix(1:30, 5, 6)
a
t(a)
pca <- prcomp(t(microarray_matrix_filtered),center=T,scale=T)
pca[1]
?procomp
?prcomp
pca$rotation[1:5,1:4]
pca$rotation[1:20,1:2]
pc1<- pca$rotation[order(max(pca$rotation[,1]))[1:20],1]
pc1
pc1<- pca$rotation[order(abs(pca$rotation[,1]))[1:20],1]
pc1
pc1<- pca$rotation[order(abs(pca$rotation[,1]),decreasing = T)[1:20],1]
pc1
head(abs(pca$rotation[,1])
)
head(order(abs(pca$rotation[,1])))
order(12:1)
12:1
order(12:1,decreasing = T)
pc1<- pca$rotation[order(abs(pca$rotation[,1]),decreasing = T)[1:20],1]
max((pca$rotation[,1]))
min((pca$rotation[,1]))
View(pc1)
pc1<- pca$rotation[order(abs(pca$rotation[,1]),decreasing = T)[1:5],1]
pc2<- pca$rotation[order(abs(pca$rotation[,1]),decreasing = T)[1:5],2]
dimnames(pc1)
names(pc1)
View(labels)
ifelse(1==1,"blue","red")
ifelse(c(1,3)==1,"blue","red")
t(labels)
View(t(lables))
View(t(labels))
labels2<-labels[,2]
rownames(labels)<-labels[1]
View(labels)
rownames(labels)<-labels[1]
labels[1]
rownames(labels)<-labels$patient
View(labels)
labels2<-t(labels)
'TCGA-AG-A02N'
c('TCGA-AG-A02N','TCGA-AG-A036')
labels2[c('TCGA-AG-A02N','TCGA-AG-A036')]
labels2['TCGA-AG-A036']
view(labels2)
View(labels2)
names(pca[1])
dimnames(pca[1])
dimnames(pca[,1])
dimnames(pca)
head(pca[1])
head(pca[,1])
head(pca[,1])
head(pca[1,])
pca[1]
vapply(colnames(microarray_matrix_filtered))
vapply(colnames(microarray_matrix_filtered),color_key)
color_key<-function(patient)
{
return(ifelse(labels[which(labels[,1]==patient)[1],2],"blue","red"))}
vapply(colnames(microarray_matrix_filtered),color_key)
?vapply
vapply(colnames(microarray_matrix_filtered),color_key)
plot(pca[comp2],pca[comp2],col=lapply(colnames(microarray_matrix_filtered),color_key))
colnames(microarray_matrix_filtered)
View(microarry_data)
split('TCGA.AG.4005.01A.01R.1119.07','.')
strsplit('TCGA.AG.4005.01A.01R.1119.07','.')
strsplit('TCGA.AG.4005.01A.01R.1119.07','\.')
strsplit('TCGA.AG.4005.01A.01R.1119.07','..')
lables2<-list(labels$cancer)
labels2
labels2['TCGA-AG-A02X']
names(labels2)<-labels$patient
labels2['TCGA-AG-A02X']
View(labels)
labels$patient
View(labels)
plot(pca[1],pca[2])
pca[1]
class(pca[1])
class(pca[[1]])
plot(pca[[1]],pca[[2]])
pca[[2]]
pca[,1]
class(pca)
pca[,1:2]
plot(pca$x[1],pca$x[2])
plot(pca$x[,1],pca$x[,2])
plot(pca$x[,1],pca$x[,3])
plot(pca$x[,2],pca$x[,3])
pca$x
pca <- prcomp(t(microarray_matrix_filtered),center=T,scale=T)
pca <- prcomp((microarray_matrix_filtered),center=T,scale=T)
pca$x
head(pca$x)
pca <- prcomp(t(microarray_matrix_filtered),center=T,scale=T)
pca$rotation
pca <- prcomp((microarray_matrix_filtered),center=T,scale=T)
pca$rotation
pca <- prcomp(t(microarray_matrix_filtered),center=T,scale=T)
pca$x[1]
pca$x[,1]
names(pca$x[1])
names(pca$x[,1])
strplit("asdf.asdf",'.')
strplit("asdf.asdf",'\.')
strplit("asdf.asdf",'//.')
strplit("asdf.asdf",'a')
strsplit("asdf.asdf",'a')
strsplit("asdf.asdf",'.')
strsplit("asdf.asdf",'/.')
strsplit("asdf.asdf",'..')
strsplit("asdf.asdf",'\\.')
strsplit("asdf.asdf",'\\.')[1:3]
strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.')[1:3]
strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.')[1]
strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.')[1][1:3]
strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.')[[1:3]]
strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.')
strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.')[[1,3]]
strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.')[1,3]
strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.')[1]
strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.')[1][1]
class(strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.'))
class(strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.'))[[1]]
strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.')[[1]]
strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.')[[1]][1:3]
paste(strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.')[[1]][1:3],sep='-')
?paste
paste(strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.')[[1]][1:3],sep='\\-')
paste(strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.')[[1]][1:3])
class(strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.')[[1]][1:3])
paste(strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.')[[1]][1:3])
paste(strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.')[[1]][1:3])
paste0(strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.')[[1]][1:3])
a=strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.')[[1]][1:3]
a
paste0(a)
concat(a)
paste(c('a','v,','asdf'))
paste0(strsplit("TCGA.AG.4015.01A.01R.1119.07",'\\.')[[1]][1:3], collapse = '-')
labels$patient
