if(all(abs(ph-ph_head)<epsilon))
{
return(list(ph=ph_head,likelyhoods=likelyhood,epsilon=epsilon))
}
else
{
ph=ph_head
}
}
}
u_sub <- U[names(U) %in% rownames(occ_sub)]
Ur <-u_sub[order(names(u_sub))]
occ_sub<-occ_sub[order(rownames(occ_sub)),]
a=our.EM(occ_sub,ph_init,Ur)
bootres<-c()
for (i in 1:1000)
{ print(i)
samples<-sample(nrow(occ_sub),nrow(occ_sub),replace=T)
bootstrap_sub<-occ_sub[sort(unique(samples)),]
count<- table(samples)
newUr<- as.vector(count)
names(newUr)<-names(occ_sub)[as.numeric(names(count))]
ph_i<- rep(1/10,10)
r=our.EM(bootstrap_sub,ph_i,newUr,1e-5)
bootres<-c(bootres,r$ph)
}
library(boot)
bootstrap_function <-function(data,indeces)
{
bootstrap_sub<-data[sort(unique(indeces)),]
count<- table(indeces)
newUr<- as.vector(count)
names(newUr)<-names(data)[as.numeric(names(count))]
ph_i<- rep(1/10,10)
r=our.EM(bootstrap_sub,ph_i,newUr,1e-5)
return(r$ph)
}
getOption("boot.ncpus", 1L)
bootstrap_resample_dataset <-function(data,indeces)
{
bootstrap_sub<-data[sort(unique(indeces)),]
count<- table(indeces)
newUr<- as.vector(count)
names(newUr)<-names(data)[as.numeric(names(count))]
ph_i<- rep(1/10,10)
r=our.EM(bootstrap_sub,ph_i,newUr,1e-5)
return(r$ph)
}
bootobj<- boot(occ_sub,bootstrap_resample_dataset,1000,parallel ="multicore",ncpus=4)
boot.ci(bootobj,index=1)
boot.ci(bootobj,'bca'index=1)
boot.ci(bootobj,'bca',index=1)
boot.ci(bootobj,type='bca',index=1)
A=boot.ci(bootobj,type='bca',index=1)
A$bca
A=boot.ci(bootobj,type='norm',index=1)
A$bca
A
A$normal
boxplot(A$t0)
boxplot(bootobj$t0)
bootobj$t0
boxplot(bootobj$t)
view(bootobj$t)
View(bootobj$t)
B=sort(bootobj$t[1])
quantile(bootobj$t[1],c(0.025,97.5))
quantile(bootobj$t[1],c(0.025,0.975))
sort(bootobj$t[1])[25]
B=sort(bootobj$t[0])
B
bootobj$t[0]
bootobj$t[0]
bootobj$t[,0]
View(bootobj$t)
View(bootobj$t[1])
View(bootobj$t[,1])
sort(bootobj$t[,1])[25]
A$normal
min(bootobj$t)
min(bootobj$t[,1])
boot.ci(bootobj)
boot.ci(bootobj,index=1)
boot.ci(bootobj,index=2)
sum(bootobj$t[,1]>=0)
sum(bootobj$t[,1]>0)
sum(bootobj$t[,1]>0.0001)
sum(bootobj$t[,1]>0.00001)
sum(bootobj$t[,1]>0.0000001)
boot.ci(bootobj,index=1,type='normal')
boot.ci(bootobj,index=2,type='normal')
boot.ci(bootobj,type='norm',index=2)
boot.ci(bootobj,type='basic',index=2)
boxplot(bootobj$t,xlab='haplotypes',ylab='distribution')
boxplot(bootobj$t,xlab='haplotypes',ylab='distribution',col=('w','r','r','w','r','r','w''w''w''w'))
boxplot(bootobj$t,xlab='haplotypes',ylab='distribution',col=c('w','r','r','w','r','r','w''w''w''w'))
boxplot(bootobj$t,xlab='haplotypes',ylab='distribution',col=c('white','r','r','white','r','r','white','white','white','white'))
boxplot(bootobj$t,xlab='haplotypes',ylab='distribution',col=c('r','r','r','r','r','r','r','r','r','r'))
boxplot(bootobj$t,xlab='haplotypes',ylab='distribution',col=c('red','red','red','red','red','red','red','red','red','red'))
boxplot(bootobj$t,xlab='haplotypes',ylab='distribution',col=c('white','red','red','red','red','red','red','red','red','red'))
boxplot(bootobj$t,xlab='haplotypes',ylab='distribution',col=c('white','red','red','white','red','red','red','red','red','red'))
boxplot(bootobj$t,xlab='haplotypes',ylab='distribution',col=c('white','red','red','white','red','white','red','red','red','red'))
boxplot(bootobj$t,xlab='haplotypes',ylab='distribution',col=c('white','red','red','white','red','red','white','white','white','white'))
plot(a$likelyhoods,ylab='likelyhood',xlab='iteration')
barplot(a$ph)
barplot(a$ph,las=2)
barplot(a$ph,las=2,lab='Properbility')
barplot(a$ph,las=2,ylab='Properbility')
barplot(a$ph,las=2,ylab='Properbility',main='Properbilitys of haplotypes for given dataset(337 reads)')
barplot(a$ph,las=2,ylab='Properbility',main='Properbilitys of haplotypes for dataset (337 reads)')
barplot(a$ph,las=2,ylab='Properbility',main='Properbilitys of haplotypes for the dataset (337 reads)')
plot(a$likelyhoods,ylab='likelyhood',xlab='iteration',type=''l)
plot(a$likelyhoods,ylab='likelyhood',xlab='iteration',type='l')
res= matrix(ncol=3,nrow=ncol(occ_sub),dimnames=list(haplotypes=colnames(occ_sub),value=c('mean','conf_intervall_low_95','conf_intervall_up_95'))
#############
# 5
#############
## How reliable are results based on the bootstrapping?
boxplot(bootobj$t,xlab='haplotypes',ylab='distribution',col=c('white','red','red','white','red','red','white','white','white','white'))
res= matrix(ncol=3,nrow=ncol(occ_sub),dimnames=list(haplotypes=colnames(occ_sub),value=c('mean','conf_intervall_low_95','conf_intervall_up_95')))
res
res<-c()
i=1
boot.ci(bootobj,'bca',index=i)
boot.ci(bootobj,'bca',index=i)
i
boot.ci(bootobj,'bca',index=1)
boot.ci(bootobj,'norm',index=1)
boot.ci(bootobj,type='bca',index=i)
conf_int<-boot.ci(bootobj,type='bca',index=i)
conf_int<-boot.ci(bootobj,type='bca',index=i)
conf_int$bca
mean(bootobj$t[,1])
conf_int<-boot.ci(bootobj,type='bca',index=2)
conf_int
conf_int$bca
conf_int$bca[4:5]
conf_int$call
conf_int$t0
mean(bootobj$t[,2])
?boot.ci
conf_int<-boot.ci(bootobj,type='bca',index=2,h=mean)
conf_int
conf_int$t0
res<-c()
for (i in 1:10)
{
conf_int<-boot.ci(bootobj,type='bca',index=i)
s<- c(res,mean(bootobj$t[,i]),conf_int$bca[4:5])
}
conf_int<-boot.ci(bootobj,type='bca',index=1)
conf_int<-boot.ci(bootobj,type='bca',index=2)
conf_int<-boot.ci(bootobj,type='bca',index=3)
conf_int<-boot.ci(bootobj,type='bca',index=4)
conf_int<-boot.ci(bootobj,type='bca',index=5)
conf_int<-boot.ci(bootobj,type='bca',index=6)
conf_int<-boot.ci(bootobj,type='bca',index=7)
conf_int<-boot.ci(bootobj,type='bca',index=8)
matrix(res,ncol=3)
length(res)
res<-c()
for (i in 1:10)
{
conf_int<-boot.ci(bootobj,type='bca',index=i)
res<- c(res,mean(bootobj$t[,i]),conf_int$bca[4:5])
}
matrix(res,ncol=3)
r= matrix(res,ncol=3,dimnames=list(haplotypes=colnames(occ_sub),value=c('mean','conf_intervall_low_95','conf_intervall_up_95'))
#############
# 5
#############
## How reliable are results based on the bootstrapping?
boxplot(bootobj$t,xlab='haplotypes',ylab='distribution',col=c('white','red','red','white','red','red','white','white','white','white'))
r= matrix(res,ncol=3,dimnames=list(haplotypes=colnames(occ_sub),value=c('mean','conf_intervall_low_95','conf_intervall_up_95')))
r
res<-c()
for (i in 1:10)
{
conf_int<-boot.ci(bootobj,type='norm',index=i)
res<- c(res,mean(bootobj$t[,i]),conf_int$bca[4:5])
}
r= matrix(res,ncol=3,dimnames=list(haplotypes=colnames(occ_sub),value=c('mean','conf_intervall_low_95','conf_intervall_up_95')))
conf_int<-boot.ci(bootobj,type='norm',index=i)
conf_int$normal
res<-c()
for (i in 1:10)
{
conf_int<-boot.ci(bootobj,type='norm',index=i)
res<- c(res,mean(bootobj$t[,i]),conf_int$normal[3:4])
}
r= matrix(res,ncol=3,dimnames=list(haplotypes=colnames(occ_sub),value=c('mean','conf_intervall_low_95','conf_intervall_up_95')))
r
conf_int<-boot.ci(bootobj,type='norm',index=1)
conf_int$normal
conf_int$normal[3:4]
conf_int$normal[2:3]
conf_int<-boot.ci(bootobj,type='basic',index=1)
conf_int$basic
boot.ci(bootobj,index=1)
boot.ci(bootobj,type=c("norm","basic", "perc", "bca"index=1)
boot.ci(bootobj,type=c("norm","basic", "perc", "bca"),index=1)
mean(bootobj$t[,i])
mean(bootobj$t[,1])
median(bootobj$t[,1])
conf_int<-boot.ci(bootobj,type='basic',index=i)
conf_int$basic
conf_int$
conf_int
conf_int
conf_int$basic[3:$]
conf_int$basic[3:4]
conf_int$basic[4:5]
res<-c()
for (i in 1:10)
{
conf_int<-boot.ci(bootobj,type='basic',index=i)
res<- c(res,mean(bootobj$t[,i]),conf_int$basic[4:5])
}
r= matrix(res,ncol=3,dimnames=list(haplotypes=colnames(occ_sub),value=c('mean','conf_intervall_low_95','conf_intervall_up_95')))
print(r)
barplot(a$ph,las=2,ylab='Properbility',main='Properbilitys of haplotypes for the dataset (337 reads)')
png('./barlot.EM.png')
barplot(a$ph,las=2,ylab='Properbility',main='Properbilitys of haplotypes for the dataset (337 reads)')
dev.off()
png('./likelyhoods.EM.png')
plot(a$likelyhoods,ylab='likelyhood',xlab='iteration',type='l')
dev.off()
png('./likelyhoods.EM.png')
plot(a$likelyhoods,ylab='likelyhood',xlab='iteration')
dev.off()
png('./likelihoods.EM.png')
plot(a$likelihoods,ylab='likelihood',xlab='iteration')
dev.off()
library(seqinr)
library(boot)
reads<-read.fasta(file = 'fna-files/fna-files/3.TCA.454Reads.fna',as.string=TRUE)
read_Cat<- sapply(reads,function(x){if(substr(x[1],1,10)=='acgagtgcgt'){return (1)} else if(substr(x[1],1,10)=='aggctcgaca'){return (2)}else {return (3)}})
clone_mix_reads_raw <- reads[read_Cat==1]
clone_mix_reads_seq <- sapply(clone_mix_reads_raw,function(x){substring(x[1],11)})
## Count duplicated reads for U
read_counts<-list()
read_counts[unique(clone_mix_reads_seq)]=1
for( i in clone_mix_reads_seq[duplicated(clone_mix_reads_seq)])
{
read_counts[i]<-as.numeric(read_counts[i])+1
}
U<- sapply(read_counts,function(x){x})
references<- read.fasta('./clonal_sequences.fasta',as.string=T)
referencestrings <-sapply(references,function(x){x[1]})
#######
# 2
#######
occ<-matrix(nrow=length(U),ncol=length(referencestrings),dimnames=(list(read=names(U),reference=names(referencestrings))))
for (i in 1:10)
{
print(i)
occ[,i]<-sapply(names(U),function(read){grepl(read,referencestrings[i])})
}
# Subset the occurance matrix and the count vector of the sequences
occ_bool<-as.logical(apply(occ,1,sum))
occ_sub<-occ[occ_bool,]
u_sub <- U[names(U) %in% rownames(occ_sub)]
Ur <-u_sub[order(names(u_sub))]
occ_sub<-occ_sub[order(rownames(occ_sub)),]
############
# 3
############
ph_init <- apply(occ_sub,2,function(col){sum(col)/sum(occ_sub)})
our.EM<-function(read_map_matrix, ph,Ur,epsilon=1e-16)
{
Pr.R_r.cond.H_h<-apply(read_map_matrix,2,function(col)
{
if(sum(col))
{
return(1/sum(col))
}
else
{
return (0)
}
}
)
read_prob_matrix <- Pr.R_r.cond.H_h*t(read_map_matrix)
likelihood <-c()
while(T)
{
Pr.R_r<-apply(read_map_matrix,1,
function(row)
{
sum(
Pr.R_r.cond.H_h*row*ph
)})
numerator<- (ph*read_prob_matrix)
U_rh<- t(numerator)*(Ur/Pr.R_r)
ph_head<-apply(U_rh,2,sum)/sum(Ur)
if(sum(is.nan(ph_head)))
{browser()}
likelihood<-c(likelihood,sum(Ur*log(Pr.R_r)))
if(all(abs(ph-ph_head)<epsilon))
{
return(list(ph=ph_head,likelihoods=likelihood,epsilon=epsilon))
}
else
{
ph=ph_head
}
}
}
a=our.EM(occ_sub,ph_init,Ur)
png('./barlot.EM.png')
barplot(a$ph,las=2,ylab='Properbility',main='Properbilitys of haplotypes for the dataset (337 reads)')
dev.off()
png('./likelihoods.EM.png')
plot(a$likelihoods,ylab='likelihood',xlab='iteration')
dev.off()
bootstrap_resample_dataset <-function(data,indeces)
{
bootstrap_sub<-data[sort(unique(indeces)),]
count<- table(indeces)
newUr<- as.vector(count)
names(newUr)<-names(data)[as.numeric(names(count))]
ph_i<- rep(1/10,10)
r=our.EM(bootstrap_sub,ph_i,newUr,1e-5)
return(r$ph)
}
bootobj<- boot(occ_sub,bootstrap_resample_dataset,1000,parallel ="multicore",ncpus=4)
res= matrix(ncol=3,nrow=ncol(occ_sub),dimnames=list(haplotypes=colnames(occ_sub),value=c('mean','conf_intervall_low_95','conf_intervall_up_95')))
res<-c()
for (i in 1:10)
{
conf_int<-boot.ci(bootobj,type='basic',index=i)
res<- c(res,mean(bootobj$t[,i]),conf_int$basic[4:5])
}
r= matrix(res,ncol=3,dimnames=list(haplotypes=colnames(occ_sub),value=c('mean','conf_intervall_low_95','conf_intervall_up_95')))
print(r)
#############
# 5
#############
## How reliable are results based on the bootstrapping?
boxplot(bootobj$t,xlab='haplotypes',ylab='distribution',col=c('white','red','red','white','red','red','white','white','white','white'))
boxplot(bootobj$t,xlab='haplotypes',ylab='properbility',col=c('white','red','red','white','red','red','white','white','white','white'))
png('boxplot_boot.png')
boxplot(bootobj$t,xlab='haplotypes',ylab='properbility',col=c('white','red','red','white','red','red','white','white','white','white'))
dev.off()
boxplot(bootobj$t,xlab='haplotypes',ylab='properbility',col=c('white','red','red','white','red','red','white','white','white','white'),las=2,xlab=colnames(occ_sub))
?boxplot
a=bootobj$t
colnames(a)=colnames(occ_sub)
boxplot(bootobj$t,xlab='haplotypes',ylab='properbility',col=c('white','red','red','white','red','red','white','white','white','white'),las=2)
a
View(a)
?boxplot
boxplot(a,xlab='haplotypes',ylab='properbility',col=c('white','red','red','white','red','red','white','white','white','white'),las=2)
boxplot(a,ylab='properbility',col=c('white','red','red','white','red','red','white','white','white','white'),las=2)
png('boxplot_boot.png')
a=bootobj$t
colnames(a)=colnames(occ_sub)
boxplot(a,ylab='properbility',col=c('white','red','red','white','red','red','white','white','white','white'),las=2)
dev.off()
library(seqinr)
library(boot)
reads<-read.fasta(file = 'fna-files/fna-files/3.TCA.454Reads.fna',as.string=TRUE)
read_Cat<- sapply(reads,function(x){if(substr(x[1],1,10)=='acgagtgcgt'){return (1)} else if(substr(x[1],1,10)=='aggctcgaca'){return (2)}else {return (3)}})
clone_mix_reads_raw <- reads[read_Cat==1]
clone_mix_reads_seq <- sapply(clone_mix_reads_raw,function(x){substring(x[1],11)})
read_counts<-list()
read_counts[unique(clone_mix_reads_seq)]=1
for( i in clone_mix_reads_seq[duplicated(clone_mix_reads_seq)])
{
read_counts[i]<-as.numeric(read_counts[i])+1
}
U<- sapply(read_counts,function(x){x})
references<- read.fasta('./clonal_sequences.fasta',as.string=T)
referencestrings <-sapply(references,function(x){x[1]})
occ<-matrix(nrow=length(U),ncol=length(referencestrings),dimnames=(list(read=names(U),reference=names(referencestrings))))
for (i in 1:10)
{
print(i)
occ[,i]<-sapply(names(U),function(read){grepl(read,referencestrings[i])})
}
occ_bool<-as.logical(apply(occ,1,sum))
occ_sub<-occ[occ_bool,]
u_sub <- U[names(U) %in% rownames(occ_sub)]
Ur <-u_sub[order(names(u_sub))]
occ_sub<-occ_sub[order(rownames(occ_sub)),]
ph_init <- apply(occ_sub,2,function(col){sum(col)/sum(occ_sub)})
our.EM<-function(read_map_matrix, ph,Ur,epsilon=1e-16)
{
Pr.R_r.cond.H_h<-apply(read_map_matrix,2,function(col)
{
if(sum(col))
{
return(1/sum(col))
}
else
{
return (0)
}
}
)
read_prob_matrix <- Pr.R_r.cond.H_h*t(read_map_matrix)
likelihood <-c()
while(T)
{
Pr.R_r<-apply(read_map_matrix,1,
function(row)
{
sum(
Pr.R_r.cond.H_h*row*ph
)})
numerator<- (ph*read_prob_matrix)
U_rh<- t(numerator)*(Ur/Pr.R_r)
ph_head<-apply(U_rh,2,sum)/sum(Ur)
if(sum(is.nan(ph_head)))
{browser()}
likelihood<-c(likelihood,sum(Ur*log(Pr.R_r)))
if(all(abs(ph-ph_head)<epsilon))
{
return(list(ph=ph_head,likelihoods=likelihood,epsilon=epsilon))
}
else
{
ph=ph_head
}
}
}
our.EM.results=our.EM(occ_sub,ph_init,Ur)
png('./barlot.EM.png')
barplot(our.EM.results$ph,las=2,ylab='Properbility',main='Probabilitys of haplotypes for the dataset (337 reads)')
dev.off()
png('./likelihoods.EM.png')
plot(our.EM.results$likelihoods,ylab='likelihood',xlab='iteration')
dev.off()
bootstrap_resample_dataset <-function(data,indeces)
{
bootstrap_sub<-data[sort(unique(indeces)),]
count<- table(indeces)
newUr<- as.vector(count)
names(newUr)<-names(data)[as.numeric(names(count))]
ph_i<- rep(1/10,10)
r=our.EM(bootstrap_sub,ph_i,newUr,1e-5)
return(r$ph)
}
bootobj<- boot(occ_sub,bootstrap_resample_dataset,1000,parallel ="multicore",ncpus=4,weights = (Ur/sum(Ur)))
res<-c()
for (i in 1:10)
{
conf_int<-boot.ci(bootobj,type='basic',index=i)
res<- c(res,mean(bootobj$t[,i]),conf_int$basic[4:5])
}
r= matrix(res,ncol=3,dimnames=list(haplotypes=colnames(occ_sub),value=c('mean','conf_intervall_low_95','conf_intervall_up_95')))
print(r)
par(mfrow=c(1,2))
png('boxplot_boot.png')
a=bootobj$t
colnames(a)=colnames(occ_sub)
boxplot(a,ylab='properbility',col=c('white','red','red','white','red','red','white','white','white','white'),las=2,main='Results for bootstraping')
barplot(our.EM.results$ph,las=2,ylab='Probability',main='Probabilitys of haplotypes for the original dataset (337 reads)')
dev.off()
png('boxplot_boot2.png')
par(mfrow=c(1,2))
a=bootobj$t
colnames(a)=colnames(occ_sub)
boxplot(a,ylab='properbility',col=c('white','red','red','white','red','red','white','white','white','white'),las=2,main='Results for bootstraping')
barplot(our.EM.results$ph,las=2,ylab='Probability',main='Probabilitys of haplotypes for the original dataset (337 reads)')
dev.off()
dev.off()
png('boxplot_boot2.png')
par(mfrow=c(1,2))
a=bootobj$t
colnames(a)=colnames(occ_sub)
boxplot(a,ylab='properbility',col=c('white','red','red','white','red','red','white','white','white','white'),las=2,main='Results for bootstraping')
barplot(our.EM.results$ph,las=2,ylab='Probability',main='Probabilitys of haplotypes for the original dataset (337 reads)')
dev.off()
par(mfrow=c(1,2))
a=bootobj$t
colnames(a)=colnames(occ_sub)
boxplot(a,ylab='properbility',col=c('white','red','red','white','red','red','white','white','white','white'),las=2,ylim=0.6,main='Results for bootstraping')
barplot(our.EM.results$ph,las=2,ylab='Probability',main='Probabilitys of haplotypes for the original dataset (337 reads)',ylim=0.6)
boxplot(a,ylab='properbility',col=c('white','red','red','white','red','red','white','white','white','white'),las=2,ylim=0.6,main='Results for bootstraping')
barplot(our.EM.results$ph,las=2,ylab='Probability',main='Probabilitys of haplotypes for the original dataset (337 reads)',ylim=0.6)
?boxplot
png('boxplot_boot2.png',width=800,hight=600)
png('boxplot_boot2.png',width=800,height=600)
par(mfrow=c(1,2))
a=bootobj$t
colnames(a)=colnames(occ_sub)
boxplot(a,ylab='properbility',col=c('white','red','red','white','red','red','white','white','white','white'),las=2,ylim=0.6,main='Results for bootstraping')
barplot(our.EM.results$ph,las=2,ylab='Probability',main='Probabilitys of haplotypes for the original dataset (337 reads)')
dev.off()
png('boxplot_boot2.png',width=800,height=600)
par(mfrow=c(1,2))
a=bootobj$t
colnames(a)=colnames(occ_sub)
boxplot(a,ylab='properbility',col=c('white','red','red','white','red','red','white','white','white','white'),las=2,main='Results for bootstraping')
barplot(our.EM.results$ph,las=2,ylab='Probability',main='Probabilitys of haplotypes for the original dataset (337 reads)')
dev.off()
dev.off()
png('boxplot_boot2.png',width=800,height=600)
par(mfrow=c(1,2))
a=bootobj$t
colnames(a)=colnames(occ_sub)
boxplot(a,ylab='properbility',col=c('white','red','red','white','red','red','white','white','white','white'),las=2,main='Results for bootstraping')
barplot(our.EM.results$ph,las=2,ylab='Probability',main='Probabilitys of haplotypes for the original dataset (337 reads)')
dev.off()
png('boxplot_boot2.png',width=800,height=600)
par(mfrow=c(1,2))
a=bootobj$t
colnames(a)=colnames(occ_sub)
boxplot(a,ylab='probability',col=c('white','red','red','white','red','red','white','white','white','white'),las=2,main='Results for bootstraping')
barplot(our.EM.results$ph,las=2,ylab='Probability',main='Probabilitys of haplotypes for the original dataset (337 reads)')
dev.off()
