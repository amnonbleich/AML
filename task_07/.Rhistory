}
plot(as(all_models[[which.max(res$mLL)]]-diag(4),"graphNEL"),nodeAttrs=list(fillcolor=col), main="unrestricted")
title('Top 5 Models', outer = T)
restricted_models<-all_models[restricted]
par(mfrow=c(2,3),oma = c( 0, 0, 2, 0 ))
for (i in 1:5) {
print(i)
graph <- as(restricted_models[[restricted_models_order[i]]]-diag(4),"graphNEL")
plot(graph,
nodeAttrs=list(fillcolor=col),
main=paste("-",i, "-"))
print(i)
}
plot(as(all_models[[which.max(res$mLL)]]-diag(4),"graphNEL"),nodeAttrs=list(fillcolor=col), main="unrestricted")
title('Top 5 Models', outer = T)
sample()
?sample
sample(3,2,T)
sample(3,2,T)
sample(3,2,T)
sample(3,2,T)
sample(3,2,T)
sample(3,2,T)
sample(3,2,T)
sample(3,2,T)
sample(3,2,T)
sample(3,2,T)
round(3.4)
D [c(3,4)]
D [c(3,4),]
repeats<-100
bt_default<-set.default.parameters(unique(colnames(D)),para=res.disc$para)
all_models<- enumerate.models(c("rel","key", "tak", "mkk4hep"))
ec<-matrix(rep(0,16),nrow=4,ncol=4,dimnames=list(col=c("rel","key", "tak", "mkk4hep"),row=c("rel","key", "tak", "mkk4hep")))
for (i in 1:repeats)
{
rows<- sample(nrow(D),round(nrow(D)*0.8),replace=T)
bt_res <- nem(D[rows,],inference="search", control=control,verbose = T)
best_mod<-models[[which.max(bt_res$mLL)]]
browser()
ec<-ec+best_mod
}
repeats<-100
bt_default<-set.default.parameters(unique(colnames(D)),para=res.disc$para)
all_models<- enumerate.models(c("rel","key", "tak", "mkk4hep"))
ec<-matrix(rep(0,16),nrow=4,ncol=4,dimnames=list(col=c("rel","key", "tak", "mkk4hep"),row=c("rel","key", "tak", "mkk4hep")))
for (i in 1:repeats)
{
rows<- sample(nrow(D),round(nrow(D)*0.8),replace=T)
bt_res <- nem(D[rows,],inference="search", control=control,verbose = T)
best_mod<-all_models[[which.max(bt_res$mLL)]]
browser()
ec<-ec+best_mod
}
ec
e
ec<-ec+best_mod
ec
ec<-matrix(rep(0,16),nrow=4,ncol=4,dimnames=list(col=c("rel","key", "tak", "mkk4hep"),row=c("rel","key", "tak", "mkk4hep")))
for (i in 1:repeats)
{
print(paste('Durchlauf',i))
rows<- sample(nrow(D),round(nrow(D)*0.8),replace=T)
bt_res <- nem(D[rows,],inference="search", control=control,verbose = T)
best_mod<-all_models[[which.max(bt_res$mLL)]]
#browser()
ec<-ec+best_mod
}
ec
plot(as(likely_edges-diag(4),"graphNEL"),nodeAttrs=list(fillcolor=col), main="unrestricted")
likely_edges <-edge_properbility>=0.95
edge_properbility<- ec/repeats
likely_edges <-edge_properbility>=0.95
col<-c("yellow","yellow","green","blue")
names(col) = c("rel","key", "tak", "mkk4hep")
plot(as(likely_edges-diag(4),"graphNEL"),nodeAttrs=list(fillcolor=col), main="unrestricted")
par.new()
plot(as(likely_edges-diag(4),"graphNEL"),nodeAttrs=list(fillcolor=col), main="unrestricted")
par(mfrow=c(1,1))
plot(as(likely_edges-diag(4),"graphNEL"),nodeAttrs=list(fillcolor=col), main="unrestricted")
repeats<-100
bt_default<-set.default.parameters(unique(colnames(D)),para=res.disc$para)
all_models<- enumerate.models(c("rel","key", "tak", "mkk4hep"))
ec<-matrix(rep(0,16),nrow=4,ncol=4,dimnames=list(col=c("rel","key", "tak", "mkk4hep"),row=c("rel","key", "tak", "mkk4hep")))
for (i in 1:repeats)
{
print(paste('Durchlauf',i))
rows<- sample(nrow(D),round(nrow(D)*0.5),replace=T)
bt_res <- nem(D[rows,],inference="search", control=control,verbose = T)
best_mod<-all_models[[which.max(bt_res$mLL)]]
#browser()
ec<-ec+best_mod
}
repeats<-100
bt_default<-set.default.parameters(unique(colnames(D)),para=res.disc$para)
all_models<- enumerate.models(c("rel","key", "tak", "mkk4hep"))
ec<-matrix(rep(0,16),nrow=4,ncol=4,dimnames=list(col=c("rel","key", "tak", "mkk4hep"),row=c("rel","key", "tak", "mkk4hep")))
for (i in 1:repeats)
{
print(paste('Durchlauf',i))
rows<- sample(nrow(D),round(nrow(D)*0.5),replace=T)
bt_res <- nem(D[rows,],inference="search", control=control,verbose = F)
best_mod<-all_models[[which.max(bt_res$mLL)]]
#browser()
ec<-ec+best_mod
}
edge_properbility<- ec/repeats
likely_edges <-edge_properbility>=0.95
col<-c("yellow","yellow","green","blue")
names(col) = c("rel","key", "tak", "mkk4hep")
par(mfrow=c(1,1))
plot(as(likely_edges-diag(4),"graphNEL"),nodeAttrs=list(fillcolor=col), main="Boostrap_model")
ec
ec<-matrix(rep(0,16),nrow=4,ncol=4,dimnames=list(source=c("rel","key", "tak", "mkk4hep"),target=c("rel","key", "tak", "mkk4hep")))
for (i in 1:repeats)
{
print(paste('Durchlauf',i))
rows<- sample(nrow(D),round(nrow(D)*0.5),replace=T)
bt_res <- nem(D[rows,],inference="search", control=control,verbose = F)
best_mod<-all_models[[which.max(bt_res$mLL)]]
#browser()
ec<-ec+best_mod
}
for (i in 1:repeats)
{
print(paste('Durchlauf',i))
rows<- sample(nrow(D),round(nrow(D)*0.5),replace=T)
bt_res <- nem(D[rows,],inference="nem.greedy", control=control,verbose = F)
browser()
best_mod<-all_models[[which.max(bt_res$mLL)]]
#browser()
ec<-ec+best_mod
}
bt_res
bt_res$pos
length(bt_res$pos)
length(bt_res$mLL)
bt_res$mappos
bt_res$graph
as(bt_res$graph,'matrix')
repeats<-100
bt_default<-set.default.parameters(unique(colnames(D)),para=res.disc$para)
ec<-matrix(rep(0,16),nrow=4,ncol=4,dimnames=list(source=c("rel","key", "tak", "mkk4hep"),target=c("rel","key", "tak", "mkk4hep")))
for (i in 1:repeats)
{
print(paste('Durchlauf',i))
rows<- sample(nrow(D),round(nrow(D)*0.5),replace=T)
bt_res <- nem(D[rows,],inference="nem.greedy", control=control,verbose = F)
ec<-ec+as(bt_res$graph,'matrix')
}
edge_properbility<- ec/repeats
likely_edges <-edge_properbility>=0.95
col<-c("yellow","yellow","green","blue")
names(col) = c("rel","key", "tak", "mkk4hep")
par(mfrow=c(1,1))
plot(as(likely_edges-diag(4),"graphNEL"),nodeAttrs=list(fillcolor=col), main="Boostrap_model")
repeats<-100
bt_default<-set.default.parameters(unique(colnames(D)),para=res.disc$para)
ec<-matrix(rep(0,16),nrow=4,ncol=4,dimnames=list(source=c("rel","key", "tak", "mkk4hep"),target=c("rel","key", "tak", "mkk4hep")))
for (i in 1:repeats)
{
print(paste('Durchlauf',i))
rows<- sample(nrow(D),round(nrow(D)*0.5),replace=T)
bt_res <- nem(D[rows,],inference="nem.greedy", control=control,verbose = F)
ec<-ec+as(bt_res$graph,'matrix')
}
edge_properbility<- ec/repeats
likely_edges <-edge_properbility>=0.95
ec
sink(print(34))
invisable(print(34))
invisible(1:3)
thresh<- 0.95
buildin_bt_model<-nem.bootstrap(D, thresh=thresh, nboot=repeats,inference="nem.greedy",models=NULL,control=bt_default, verbose=TRUE)
plot(buildin_bt_model)
buildin_bt_model$graph@edgeData
buildin_bt_model$graph@edgeL
buildin_bt_model$mLL
buildin_bt_model$selected
buildin_bt_model$graph@edgeL
attributes(buildin_bt_model)
repeats<-1000
thresh<- 0.95
bt_default<-set.default.parameters(unique(colnames(D)),para=res.disc$para)
ec<-matrix(rep(0,16),nrow=4,ncol=4,dimnames=list(source=c("rel","key", "tak", "mkk4hep"),target=c("rel","key", "tak", "mkk4hep")))
for (i in 1:repeats)
{
print(paste('Durchlauf',i))
rows<- sample(nrow(D),round(nrow(D)*0.5),replace=T)
invisable(bt_res <- nem(D[rows,],inference="nem.greedy", control=control,verbose = F))
ec<-ec+as(bt_res$graph,'matrix')
}
edge_properbility<- ec/repeats
likely_edges <-edge_properbility>=thresh
repeats<-1000
thresh<- 0.95
bt_default<-set.default.parameters(unique(colnames(D)),para=res.disc$para)
ec<-matrix(rep(0,16),nrow=4,ncol=4,dimnames=list(source=c("rel","key", "tak", "mkk4hep"),target=c("rel","key", "tak", "mkk4hep")))
for (i in 1:repeats)
{
print(paste('Durchlauf',i))
rows<- sample(nrow(D),round(nrow(D)*0.5),replace=T)
invisible(bt_res <- nem(D[rows,],inference="nem.greedy", control=control,verbose = F))
ec<-ec+as(bt_res$graph,'matrix')
}
edge_properbility<- ec/repeats
likely_edges <-edge_properbility>=thresh
col<-c("yellow","yellow","green","blue")
names(col) = c("rel","key", "tak", "mkk4hep")
par(mfrow=c(1,2))
plot(as(likely_edges-diag(4),"graphNEL"),nodeAttrs=list(fillcolor=col), main="Boostrap_model")
edge_properbility<- ec/repeats
likely_edges <-edge_properbility>=thresh
col<-c("yellow","yellow","green","blue")
names(col) = c("rel","key", "tak", "mkk4hep")
par(mfrow=c(1,2))
plot(as(likely_edges-diag(4),"graphNEL"),nodeAttrs=list(fillcolor=col), main="Boostrap_model")
likely_edges
plot(as(likely_edges,"graphNEL"),nodeAttrs=list(fillcolor=col), main="Boostrap_model")
plot(buildin_bt_model$graph,nodeAttrs=list(fillcolor=col), main="own boostrap model")
plot(buildin_bt_model$graph,nodeAttrs=list(fillcolor=col), main="buildin boostrap model")
plot(buildin_bt_model$graph,nodeAttrs=list(fillcolor=col), main="buildin boostrap model")
par(mfrow=c(1,2))
plot(as(likely_edges,"graphNEL"),nodeAttrs=list(fillcolor=col), main="own boostrap model")
buildin_bt_model<-nem.bootstrap(D, thresh=thresh, nboot=repeats,inference="nem.greedy",models=NULL,control=bt_default, verbose=TRUE)
plot(buildin_bt_model$graph,nodeAttrs=list(fillcolor=col), main="buildin boostrap model")
library('nem')
library(Rgraphviz)
library(gplots)
data(BoutrosRNAi2002)
D <- BoutrosRNAiDiscrete[,9:16]
res.disc = nem.discretize(BoutrosRNAiExpression,neg.control=1:4,pos.control=5:8)
control = set.default.parameters(unique(colnames(D)),para=res.disc$para)
res <- nem(D,inference="search", control=control,verbose = T)
print(res)
best_model <- res$pos[[334]]
best <- apply(best_model,1,function(x){colnames(best_model)[which.max(x)]})
# task 1.2
print(best)
print(best)
print(best)
data.frame(names(best),best)
data.frame(best)
setwd('./Uni/Master/aml/AML/task_07/')
models <- enumerate.models(Sgenes)
best5 <- order(res$mLL,decreasing = T)[1:5]
col<-c("yellow","yellow","green","blue")
names(col) = Sgenes
png(file='Top5Models.png',width = 13, height = 10)
par(mfrow=c(2,3),oma = c( 0, 0, 2, 0 ))
for (i in 1:5) {
graph <- as(models[[best5[i]]]-diag(4),"graphNEL")
print(best5[i])
plot(graph,
nodeAttrs=list(fillcolor=col),
main=paste("-",i, "-"))
}
title('Top 5 Models', outer = T)
dev.off()
Sgenes=unique(colnames(D))
models <- enumerate.models(Sgenes)
best5 <- order(res$mLL,decreasing = T)[1:5]
col<-c("yellow","yellow","green","blue")
names(col) = Sgenes
png(file='Top5Models.png',width = 13, height = 10)
png(file='Top5Models.png',width = 600, height = 5ßß)
png(file='Top5Models.png',width = 600, height = 500)
par(mfrow=c(2,3),oma = c( 0, 0, 2, 0 ))
for (i in 1:5) {
graph <- as(models[[best5[i]]]-diag(4),"graphNEL")
print(best5[i])
plot(graph,
nodeAttrs=list(fillcolor=col),
main=paste("-",i, "-"))
}
title('Top 5 Models', outer = T)
dev.off()
m=0
n=0
mLLM<-matrix(nrow=10, ncol=10)
diffM<-matrix(nrow=10, ncol=10)
selmodel<- models[best5[1]][[1]]
for (alpha in seq(0.01,0.99,0.1))
{
m<- m+1
n=0
for (beta in seq(0.01,0.99,0.1))
{ n<-n+1
print(paste(m,n))
control = set.default.parameters(unique(colnames(D)),para=c(alpha,beta))
resT <- nem(D,inference="search", control=control)
maxi<-which.max(resT$mLL)
mLLM[m,n]<-resT$mLL[maxi]
diffM[m,n]<-sum(models[maxi][[1]]!=selmodel)
}
}
res3 <- nem(D,inference="triples", control=control)
par(mfrow=c(1,3))
res2 <- nem(D,inference="pairwise", control=control)
plot(res2, main="pairwise")
par(mfrow=c(1,3))
res2 <- nem(D,inference="pairwise", control=control)
print(res2)
par(mfrow=c(1,3))
res2 <- nem(D,inference="pairwise", control=control)
plot.nem(res2, main="pairwise")
res3 <- nem(D,inference="triples", control=control)
plot.nem(res3,main="triples")
print(res3)
res3 <- nem(D,inference="nem.greedy", control=control)
plot.nem(res3,  main="nem.greedy")
par.new()
par(mfrow=c(1,3))
res2 <- nem(D,inference="pairwise", control=control)
class(res2)
par(mfrow=c(1,3))
control = set.default.parameters(unique(colnames(D)),para=res.disc$para)
res2 <- nem(D,inference="pairwise", control=control)
plot.nem(res2, main="pairwise")
dev.off()
par(mfrow=c(1,3))
control = set.default.parameters(unique(colnames(D)),para=res.disc$para)
res2 <- nem(D,inference="pairwise", control=control)
plot.nem(res2, main="pairwise")
print(res2)
res3 <- nem(D,inference="triples", control=control)
plot.nem(res3,main="triples")
print(res3)
res3 <- nem(D,inference="nem.greedy", control=control)
plot.nem(res3,  main="nem.greedy")
print(res3)
edgecount<-matrix(rep(0,16),nrow=4,ncol=4,dimnames=list(col=unique(colnames(D)[1:8]),row=unique(colnames(D)[1:8])))
for(x in seq(1,7,2))
{
base<- 1:8
sel<-base[-c(x,x+1)]
control = set.default.parameters(unique(colnames(D)[sel]),para=res.disc$para)
resDC <- nem(D[,sel],inference="search", control=control)
mod<- as(resDC$graph,'matrix')
for (row in rownames(mod))
{
for (col in colnames(mod))
{
edgecount[row,col]<-edgecount[row,col]+mod[row,col]
}
}
}
png(file='OwnDC.png',width = 700, height = 600)
par(mfrow=c(1,3),oma = c( 0, 0, 2, 0 ))
col<-c("yellow","yellow","green","blue")
names(col)<-colnames(edgecount)
for (i in 1:3) {
graph <- as((edgecount>=i)-diag(4),"graphNEL")
plot(graph,
nodeAttrs=list(fillcolor=col),
main=paste("value=>",i))
}
dev.off()
dev.off()
png(file='OwnDC.png',width = 700, height = 600)
par(mfrow=c(1,3),oma = c( 0, 0, 2, 0 ))
col<-c("yellow","yellow","green","blue")
names(col)<-colnames(edgecount)
for (i in 1:3) {
graph <- as((edgecount>=i),"graphNEL")
plot(graph,
nodeAttrs=list(fillcolor=col),
main=paste("value=>",i))
}
title('divide and conquer algorithm for triple relations', outer = T)
dev.off()
prior1 <- matrix(c(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1), nrow=4)
colnames(prior1) <- c( "rel", "key", "tak", "mkk4hep")
rownames(prior1) <- c( "rel", "key", "tak", "mkk4hep")
prior2 <- matrix(c(1,0,0,0,1,1,0,0,1,0,1,0,1,0,0,1), nrow=4)
colnames(prior2) <- c( "rel", "key", "tak", "mkk4hep")
rownames(prior2) <- c( "rel", "key", "tak", "mkk4hep")
prior3 <- matrix(c(1,1,1,1,0,1,1,1,0,0,1,1,0,0,0,1), nrow=4)
colnames(prior3) <- c( "rel", "key", "tak", "mkk4hep")
rownames(prior3) <- c( "rel", "key", "tak", "mkk4hep")
p1_mLL <- c()
p2_mLL <- c()
p3_mLL <- c()
for (l in 10^(0:20))
{ print(l)
control.1 = set.default.parameters(unique(colnames(D)), lambda=l, Pm=prior1)
control.2 = set.default.parameters(unique(colnames(D)), lambda=l, Pm=prior2)
control.3 = set.default.parameters(unique(colnames(D)), lambda=l, Pm=prior3)
resP1 <- nem(D, inference="search", control=control.1)
resP2 <- nem(D, inference="search", control=control.2)
resP3 <- nem(D, inference="search", control=control.3)
p1_mLL <- c(p1_mLL, max(resP1$mLL))
p2_mLL <- c(p2_mLL, max(resP2$mLL))
p3_mLL <- c(p3_mLL, max(resP3$mLL))
}
plot(10^(0:20),p1_mLL,log='x',xlab='lambda',ylab='mLL',type='l',col='red')
lines((10^(0:20)),p2_mLL,log='x',col='blue')
lines((10^(0:20)),p3_mLL,log='x',col='green')
abline(v=100)
legend('bottomright',legend=c('Prior 1','Prior 2','Prior 3'),col=c('red','blue','green'),lty=1)
plot(10^(0:20),p1_mLL,log='x',xlab='lambda',ylab='mLL',type='l',col='red', main="influence of Lamda")
lines((10^(0:20)),p2_mLL,log='x',col='blue')
lines((10^(0:20)),p3_mLL,log='x',col='green')
abline(v=100)
legend('bottomright',legend=c('Prior 1','Prior 2','Prior 3'),col=c('red','blue','green'),lty=1)
col<-c("yellow","yellow","green","blue")
names(col) = c("rel","key", "tak", "mkk4hep")
png(file='Top5Models_restricted.png',width = 13, height = 10)
par(mfrow=c(2,3),oma = c( 0, 0, 2, 0 ))
for (i in 1:5) {
print(i)
graph <- as(restricted_models[[restricted_models_order[i]]]-diag(4),"graphNEL")
plot(graph,
nodeAttrs=list(fillcolor=col),
main=paste("-",i, "-"))
print(i)
}
plot(as(all_models[[which.max(res$mLL)]]-diag(4),"graphNEL"),nodeAttrs=list(fillcolor=col), main="unrestricted")
title('Top 5 Models', outer = T)
dev.off()
col<-c("yellow","yellow","green","blue")
names(col) = c("rel","key", "tak", "mkk4hep")
png(file='Top5Models_restricted.png',width = 13, height = 10)
png(file='Top5Models_restricted.png',width = 600, height = 500)
par(mfrow=c(2,3),oma = c( 0, 0, 2, 0 ))
for (i in 1:5) {
print(i)
graph <- as(restricted_models[[restricted_models_order[i]]]-diag(4),"graphNEL")
plot(graph,
nodeAttrs=list(fillcolor=col),
main=paste("-",i, "-"))
print(i)
}
all_models<- enumerate.models(c("rel","key", "tak", "mkk4hep"))
restricted<- sapply(all_models,function(v){v["mkk4hep","tak"]&v["key","rel"]&!v["tak","mkk4hep"]&!v['rel','key']})
sum(restricted) ## There are 29 Models. If reverse edges allowed there are 48
restricted_models<-all_models[restricted]
restricted_models_order<-order(res$mLL[restricted],decreasing = T)
col<-c("yellow","yellow","green","blue")
names(col) = c("rel","key", "tak", "mkk4hep")
png(file='Top5Models_restricted.png',width = 600, height = 500)
par(mfrow=c(2,3),oma = c( 0, 0, 2, 0 ))
for (i in 1:5) {
print(i)
graph <- as(restricted_models[[restricted_models_order[i]]]-diag(4),"graphNEL")
plot(graph,
nodeAttrs=list(fillcolor=col),
main=paste("-",i, "-"))
print(i)
}
plot(as(all_models[[which.max(res$mLL)]]-diag(4),"graphNEL"),nodeAttrs=list(fillcolor=col), main="unrestricted")
title('Top 5 Models', outer = T)
dev.off()
repeats<-1000
thresh<- 0.95
bt_default<-set.default.parameters(unique(colnames(D)),para=res.disc$para)
ec<-matrix(rep(0,16),nrow=4,ncol=4,dimnames=list(source=c("rel","key", "tak", "mkk4hep"),target=c("rel","key", "tak", "mkk4hep"))) # stores the edgecount
for (i in 1:repeats)
{
print(paste('Durchlauf',i))
rows<- sample(nrow(D),round(nrow(D)*0.5),replace=T) # get genes
bt_res <- nem(D[rows,],inference="nem.greedy", control=control,verbose = F)
ec<-ec+as(bt_res$graph,'matrix')
}
edge_properbility<- ec/repeats # edge proberbilitys
likely_edges <-edge_properbility>=thresh # all edges with high proberbility
col<-c("yellow","yellow","green","blue")
names(col) = c("rel","key", "tak", "mkk4hep")
par(mfrow=c(1,2))
plot(as(likely_edges,"graphNEL"),nodeAttrs=list(fillcolor=col), main="own boostrap model")
buildin_bt_model<-nem.bootstrap(D, thresh=thresh, nboot=repeats,inference="nem.greedy",models=NULL,control=bt_default, verbose=TRUE)
ec
for (i in 1:repeats)
{
print(paste('Durchlauf',i))
rows<- sample(nrow(D),round(nrow(D)*0.5),replace=T) # get genes
bt_res <- nem(D[rows,],inference="nem.greedy", control=control,verbose = F)
ec<-ec+as(bt_res$graph,'matrix')
}
for (i in 1:repeats)
{
print(paste('Durchlauf',i))
rows<- sample(nrow(D),round(nrow(D)*0.5),replace=T) # get genes
bt_res <- nem(D[rows,],inference="nem.greedy", control=control,verbose = F)
browser()
ec<-ec+as(bt_res$graph,'matrix')
}
as(bt_res$graph,'matrix')
control = set.default.parameters(unique(colnames(D)),para=res.disc$para)
control = set.default.parameters(unique(colnames(D)),para=res.disc$para)
repeats<-1000
thresh<- 0.95
bt_default<-set.default.parameters(unique(colnames(D)),para=res.disc$para)
ec<-matrix(rep(0,16),nrow=4,ncol=4,dimnames=list(source=c("rel","key", "tak", "mkk4hep"),target=c("rel","key", "tak", "mkk4hep"))) # stores the edgecount
for (i in 1:repeats)
{
print(paste('Durchlauf',i))
rows<- sample(nrow(D),round(nrow(D)*0.5),replace=T) # get genes
bt_res <- nem(D[rows,],inference="nem.greedy", control=control,verbose = F)
ec<-ec+as(bt_res$graph,'matrix')
}
edge_properbility
ec
edge_properbility<- ec/repeats # edge proberbilitys
edge_properbility
likely_edges <-edge_properbility>=thresh # all edges with high proberbility
col<-c("yellow","yellow","green","blue")
names(col) = c("rel","key", "tak", "mkk4hep")
par(mfrow=c(1,2))
plot(as(likely_edges,"graphNEL"),nodeAttrs=list(fillcolor=col), main="own boostrap model")
buildin_bt_model<-nem.bootstrap(D, thresh=thresh, nboot=repeats,inference="nem.greedy",models=NULL,control=bt_default, verbose=TRUE)
plot(buildin_bt_model$graph,nodeAttrs=list(fillcolor=col), main="buildin boostrap model")
