install.packages("devtools")
install.packages("devtools")
source("https://bioconductor.org/biocLite.R")  # Install Bioconductor
biocLite(c("Biostrings","iterators","ade4"))                                     # Install required packages
devtools::install_github("crarlus/paprbag") # install paprbag
library(paprbag)
library(randomForest)
install.packages("randomForest")
library(randomForest)
data('trainigData')
library(paprbag)
data('trainigData')
data('trainingData')
set.seed(42)  # set seed to get always the same random numbers
postive_samples_positions<-sample.int(100,50)       #get 50 randomly chosen postiv labled datapoints
negative_samples_positions<-sample.int(100,50)+100  #get 50 randomly chosen negativ labled datapoints
trainingselection<- rep(F,200)  # Creats a vector with 200 FALSE entries
trainingselection[postive_samples_positions]<-TRUE
trainingselection[negative_samples_positions]<-TRUE
data_training<-trainingData[trainingselection,]
data_test<-trainingData[!trainingselection,]
trainingData[-1,]
View(trainingData[-1,])
View(trainingData[,-1])
View(trainingData)
rf <- randomForest(data_training$label ~ ., data=data_training[,-1])
rf <- randomForest(label ~ ., data=data_training[,-1])
rf <- randomForest(label ~ ., data=data_training)
View(data_training)
rf <- randomForest(Labels ~ ., data=data_training)
print(rf$confusion)
print(rf)
print (rf_model$confusion)
rf_model <- randomForest(Labels ~ ., data=data_training)
print (rf_model$confusion)
model_test <- predict(rf_model,data=data_test)
model_test
library(sensitivity)
install.packages("sensitivity")
library(sensitivity)
sensiitivity(data=model_test,reference=data_test[,1])
sensitivity(data=model_test,reference=data_test[,1])
sensitivity::sensitivity
sensitivity
install.packages("sensitivity")
install.packages("sensitivity")
librar(caret)
library(caret)
install.packages("caret")
library(caret)
print(rf_model)
rf_model <- randomForest(Labels ~ ., data=data_training)
library(paprbag)
library(randomForest)
library(paprbag)
library(randomForest)
data('trainingData')
set.seed(42)  # set seed to get always the same random numbers
postive_samples_positions<-sample.int(100,50)       #get 50 randomly chosen postiv labled datapoints
negative_samples_positions<-sample.int(100,50)+100  #get 50 randomly chosen negativ labled datapoints
trainingselection<- rep(F,200)  # Creats a vector with 200 FALSE entries
trainingselection[postive_samples_positions]<-TRUE
trainingselection[negative_samples_positions]<-TRUE
data_training<-trainingData[trainingselection,]
data_test<-trainingData[!trainingselection,]
rf_model <- randomForest(Labels ~ ., data=data_training)
print (rf_model$confusion)
rf_model
library(caret)
caret::confusionMatrix
caret::confusionMatrix(1,1)
install.packages("caret",
repos = "http://cran.r-project.org",
dependencies = c("Depends", "Imports", "Suggests"))
print (rf_model$confusion)
rf_model$proximity
rf_model$test
?randomForest
rf_model <- randomForest(Labels ~ ., data=data_training,xtest=data_test)
rf_model <- randomForest(Labels ~ ., data=data_training,xtest=data_training)
rf_model <- randomForest(Labels ~ ., data=data_training,subset = trainingselection)
rf_model <- randomForest(Labels ~ ., data=data_training,subset = postive_samples_positions)
rf_model$test
rf_model$confusion
print (rf_model$confusion)
rf_model <- randomForest(Labels ~ ., data=data_training)
rf_model
data_test[,-1]
View(data_test[,-1])
rf_model <- randomForest(Labels ~ ., data=data_training,xtest=data_test[,-1],ytest=data_test[,1])
rf_model$test
print(rf_model$test)
print(rf_model)
rf_model$predicted
rf_model$y
print(rf_model)
print(rf_model$confusion)
print(rf_model$test)
print(rf_model$err.rate)
print(rf_model$localImportance)
print(rf_model$test)
print(rf_model)
rf_model$test$confusion
print("asdf",3)
mean(c(0.24,0.36))
print (paste("Confusion",rf_model$confusion))
rf_model$test$confusion$class.error
rf_model$test$confusion[,3]
print("Training Set")
print(paste("Training set error:",mean(rf_model$confusion[,3])))
print(rf_model$confusion)
print("Test Set")
print(paste("Test set error:",mean(rf_model$test$confusion[,3])))
print(rf_model$confusion)
message("asdf")
print_results <- function (x)
{
print("Training Set")
print(paste("Training set error:",mean(x$confusion[,3])))
print(x$confusion)
print("Test Set")
print(paste("Test set error:",mean(x$test$confusion[,3])))
print(x$confusion)
}
print_results(rf_model)
string(1)
as.string(2)
as.character(2)
cat(2)
print_results <- function (x)
{
cat("Training Set")
cat(paste("Training set error:",mean(x$confusion[,3])))
cat(x$confusion)
cat("Test Set")
cat(paste("Test set error:",mean(x$test$confusion[,3])))
cat(x$confusion)
}
print_results(rf_model)
print_results <- function (x)
{
cat("Training Set\n")
cat(paste("Training set error:",mean(x$confusion[,3],'\n')))
print(x$confusion)
cat("Test Set")
cat(paste("Test set error:",mean(x$test$confusion[,3])))
print(x$confusion)
}
print_results(rf_model)
cat("Training Set\n")
cat(paste("Training set error:"))
print_results <- function (x)
{
cat("Training Set\n")
cat(paste("Training set error:",mean(x$confusion[,3],'\n')))
print(x$confusion)
cat("Test Set")
cat(paste("Test set error:",mean(x$test$confusion[,3])))
print(x$confusion)
}
print_results(rf_model)
rf_model$confusion[,3]
#install.packages("kernlab")
#install.packages("seqinr")
setwd("./Uni/Master/aml/AML/task_05/")
library(seqinr)# for loading fasta
library(kernlab)
#library(KeBABS)
stripe_upper<-function(element)
{
return(gsub('[[:lower:]]','',element[[1]]))
}
PUM2pos <- read.fasta('./rna-binding/positive_PUM2.fasta',as.string=T,forceDNAtolower=F)
PUM2pos_striped <-sapply(PUM2pos,stripe_upper)
PUM2neg <- read.fasta('./rna-binding/negative_PUM2.fasta', as.string=T,forceDNAtolower=F)
PUM2neg_striped <- sapply(PUM2neg,stripe_upper)
splitpercent<- 0.85
positive_training_idx <- sample(length(PUM2pos_striped),floor(length(PUM2pos_striped)*splitpercent))
negative_training_idx <- sample(length(PUM2neg_striped),floor(length(PUM2neg_striped)*splitpercent))
positive_training_set <- PUM2pos_striped[positive_training_idx]
positive_test_set     <- PUM2pos_striped[-positive_training_idx]
negative_training_set <- PUM2neg_striped[negative_training_idx]
negative_test_set <- PUM2neg_striped[-negative_training_idx]
# finaly create the training and test set as two columned data.frames
training_set <- data.frame(
seq=c(positive_training_set,negative_training_set),
lables=as.factor(c(rep(T,length(positive_training_set)),rep(F,length(negative_training_set)))))
test_set <- data.frame(
seq=c(positive_test_set,negative_test_set),
lables=as.factor(c(rep(T,length(positive_test_set)),rep(F,length(negative_test_set)))))
####################
#     Task 2       #
####################
stringkernel <- stringdot(type="spectrum", length=2, normalized=TRUE)
sk_model <- ksvm(lables~.,data=training_set,kernel=stringkernel)
test <- predict()
stripe_upper<-function(element)
{
return(gsub('[[:lower:]]','',element[[1]]))
}
biocLite("kebabs")
source("https://bioconductor.org/biocLite.R")
biocLite("kebabs")
specK2 <- spectrumKernel(k=2)
library(KeBABS)
library(kebabs)
specK2 <- spectrumKernel(k=2)
library(e1071)
?svm
View(training_set)
svmM <- svm(lables~seq,data=training_set,kernel=specK2)
