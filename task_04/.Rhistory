ns_gene <- liver.19expR[1,]
ns_snp <- g19[,252]
boxplot(ns_gene ~as.factor(ns_snp),col='red',main='Distribution of a non significant EQTL',ylab='expression level', xlab="SNPs")
dev.off()
eqtl
getwd
getwd()
getwd('../')
getwd('../../')
setwd('../../')
getwd()
setwd('../../')
getwd()
getwd('Master/aml/AML/task_04/')
setwd('Master/aml/AML/task_04/')
clinical_data <- read.csv('./crc_clinical_sheet.txt', header=TRUE, sep='\t')
View(clinical_data)
clinical_data <- read.csv('./crc_clinical_sheet.txt', header=TRUE, sep='\t')
View(clinical_data)
less_than_30_percent_na(column)
{
return(sum(is.na(column))/length(column)<=0.3)
}
less_than_30_percent_na(column)
{
return(sum(is.na(column))/length(column)<=0.3)
}
less_than_30_percent_na<- function(column)
{
return(sum(is.na(column))/length(column)<=0.3)
}
apply(clinical_data,2,less_than_30_percent_na)
clinical_data_processed<- clinical_data_processed[mt30p]
clinical_data_processed<- clinical_data[mt30p]
mt30p<-apply(clinical_data,2,less_than_30_percent_na)
clinical_data_processed<- clinical_data[mt30p]
View(clinical_data)
clinical_data_processed<- clinical_data[mt30p& Unnessescary_features]
Unnessescary_features<- rep(T,29)### TO DO
clinical_data_processed<- clinical_data[mt30p& Unnessescary_features]
used_patients <- (apply(clinical_data_processed,1,sum_na)<1)
sum_na <- function (to_sum)
{
return(sum(is.na(to_sum)))
}
used_patients <- (apply(clinical_data_processed,1,sum_na)<1)
clinical_data_processed <- clinical_data_processed[,used_patients]
clinical_data_processed <- clinical_data_processed[used_patients,]
ncol(clinical_data)
View(clinical_data)
for (column in 1:ncol(clinical_data_processed))
{
clinical_data_processed[column]<- as.factor(clinical_data_processed[column])
}
clinical_data[1]
class(clinical_data[1])
as.factor(clinical_data[1])
class(clinical_data[1,])
class(clinical_data[,1])
clinical_data[,1]
View(clinical_data)
clinical_data$lymphnodes_examined
clinical_data$synchronous_colon_cancer_present
clinical_data$vital_status
# load the datafiles
clinical_data <- read.csv('./crc_clinical_sheet.txt', header=TRUE, sep='\t')
sum_na <- function (to_sum)
{
return(sum(is.na(to_sum)))
}
less_than_30_percent_na<- function(column)
{
return(sum(is.na(column))/length(column)<=0.3)
}
## remove colums with more than 30% NA
mt30p<-apply(clinical_data,2,less_than_30_percent_na)
clinical_data_processed<- clinical_data[mt30p]
clinical_data_processed$patient<-NULL
clinical_data_processed$days_to_last_followup<-NULL
clinical_data_processed$lymphnodes_examined<-NULL
clinical_data_processed$number_of_lymphnodes_examined<-NULL
# The rest can contain information
# remove patients with na
used_patients <- (apply(clinical_data_processed,1,sum_na)<1)
clinical_data_processed <- clinical_data_processed[used_patients,]
example_train_data <- clinical_data_processed[19:184,]
example_test_data <- clinical_data_processed[1:18,]
svm_model <- svm(cancer ~ ., data = example_train_data, cost = 100, gamma = 1)
library(svm)
library(libsvm)
install.packages("libsvm")
library(libsvm)
libcurlVersion(svm)
svm
library(e1071)
install.packages("e1071")
library(e1071)
svm_model <- svm(cancer ~ ., data = example_train_data, cost = 100, gamma = 1)
svm_pred <- predict(svm_model, example_test_data[-1])
svm_pred
example_test_data[1]
rbinom
rbinom(1,3,0.5)
rbinom(1,3,0.5)
rbinom(5,3,0.5)
rbinom(5,,0.5)
?rbinom
rbinom(5,p=0.5)
rbinom(5,1,p=0.5)
rbinom(5,1,p=0.5)
rbinom(5,1,p=0.5)
rbinom(5,1,p=0.5)
rbinom(5,1,p=0.5)
1:1
1:2
hetero_call <- rep(0,50)
a=0
a+=1
hetero_call <- rep(0,50)
for (coverage_level in 1:50)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5))
if(sum(!val)>=2 & sum(val)<=80 &sum(val)<= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1}
}
}
hetero_call
hetero_call
hetero_call <- rep(0,50)
for (coverage_level in 1:50)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5))
if(sum(!val)>=2 & sum(val)<=80 &sum(val)<= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1}
}
}
hetero_call
hetero_call <- rep(0,50)
for (coverage_level in 2:50)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5))
browser()
if(sum(!val)>=2 & sum(val)<=80 &sum(val)<= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1}
}
}
val
n()
N
next
C
val
hetero_call
hetero_call
hetero_call
hetero_call <- rep(0,50)
for (coverage_level in 2:50)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5))
#browser()
if(sum(!val)>=2 & sum(val)<=80 &sum(val)>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1}
}
}
q
q()
hetero_call <- rep(0,50)
for (coverage_level in 2:50)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5))
#browser()
if(sum(!val)>=2 & sum(val)<=80 &sum(val)>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1}
}
}
hetero_call
hetero_call <- rep(0,50)
for (coverage_level in 2:50)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5))
#browser()
if(sum(!val)>=2 & sum(val)<=80 &sum(val)>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1}
}
}
hetero_call <- rep(0,50)
for (coverage_level in 2:50)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5)) # Assuming 1 is alternative
#browser()
if(sum(val)>=2 & sum(!val)<=80 &sum(!val)>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1}
}
}
hetero_call
hetero_call <- rep(0,50)
for (coverage_level in 2:50)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5)) # Assuming 1 is alternative
#browser()
if(sum(val)>=2)
{print(val)}
if(sum(val)>=2 & sum(!val)<=80 &sum(!val)>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1
print(1)}
}
}
hetero_call <- rep(0,50)
for (coverage_level in 2:10)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5)) # Assuming 1 is alternative
#browser()
if(sum(val)>=2)
{print(val)}
if(sum(val)>=2 & sum(!val)<=80 &sum(!val)>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1
print(1)}
}
}
hetero_call <- rep(0,50)
for (coverage_level in 2:10)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5)) # Assuming 1 is alternative
#browser()
percentage <- sum(val)*100/coverage_level
if(sum(val)>=2)
{print(val)}
if(sum(val)>=2 & percentage<=80 & percentage>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1
print(1)}
}
}
for (coverage_level in 2:3)
hetero_call <- rep(0,50)
for (coverage_level in 2:3)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5)) # Assuming 1 is alternative
#browser()
percentage <- sum(val)*100/coverage_level
if(sum(val)>=2)
{print(val)}
if(sum(val)>=2 & percentage<=80 & percentage>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1
print(1)}
}
}
hetero_call <- rep(0,50)
for (coverage_level in 2:3)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5)) # Assuming 1 is alternative
#browser()
percentage <- sum(val)*100/coverage_level
if(sum(val)>=2 & percentage<=80 & percentage>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1
}
}
}
plot(1:50,hetero_call,xlab='Coverage',ylab='part heterocygos calls')
hetero_call <- rep(0,50)
for (coverage_level in 2:3)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5)) # Assuming 1 is alternative
#browser()
percentage <- sum(val)*100/coverage_level
if(sum(val)>=2 & percentage<=80 & percentage>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1
}
}
}
hetero_call <- rep(0,50)
for (coverage_level in 1:50)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5)) # Assuming 1 is alternative
#browser()
percentage <- sum(val)*100/coverage_level
if(sum(val)>=2 & percentage<=80 & percentage>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1
}
}
}
plot(1:50,hetero_call,xlab='Coverage',ylab='part heterocygos calls')
plot(1:50,hetero_call,xlab='Coverage',ylab='part heterocygos calls',type='l')
20*0.2
20*0.8
hetero_call <- rep(0,50)
for (coverage_level in 20:50)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5)) # Assuming 1 is alternative
#browser()
percentage <- sum(val)*100/coverage_level
browser()
if(sum(val)>=2 & percentage<=80 & percentage>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1
}
}
}
plot(1:50,hetero_call,xlab='Coverage',ylab='part heterocygos calls',type='l')
hetero_call
for (coverage_level in 20:50)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5)) # Assuming 1 is alternative
#browser()
percentage <- sum(val)*100/coverage_level
browser()
if(sum(val)>=2 & percentage<=80 & percentage>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1
}
}
}
sum(val)
sum(val)
hetero_call[coverage_level]
next
sum(val)
hetero_call[coverage_level]
hetero_call[coverage_level]
sum(val)
percentage
sum(val)
percentage
sum(val)
hetero_call[coverage_level]
hetero_call[coverage_level]
sum(val)
hetero_call[coverage_level]
sum(val)
par(mfrow=c(1,1))
par(mfrow=c(1,1))
hetero_call <- rep(0,50)
for (coverage_level in 20:50)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5)) # Assuming 1 is alternative
#browser()
percentage <- sum(val)*100/coverage_level
browser()
if(sum(val)>=2 & percentage<=80 & percentage>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1
}
}
}
plot(1:50,hetero_call,xlab='Coverage',ylab='part heterocygos calls',type='l')
hetero_call <- rep(0,50)
for (coverage_level in 1:50)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5)) # Assuming 1 is alternative
#browser()
percentage <- sum(val)*100/coverage_level
browser()
if(sum(val)>=2 & percentage<=80 & percentage>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1
}
}
}
hetero_call <- rep(0,50)
for (coverage_level in 1:50)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5)) # Assuming 1 is alternative
percentage <- sum(val)*100/coverage_level
if(sum(val)>=2 & percentage<=80 & percentage>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1
}
}
}
plot(1:50,hetero_call,xlab='Coverage',ylab='part heterocygos calls',type='l')
plot(1:50,hetero_call,xlab='Coverage',ylab='proportion of times heterozygous variant was called in %]',type='l')
plot(1:50,hetero_call,xlab='Coverage',ylab='proportion of times heterozygous variant\nwas called in %]',type='l')
plot(1:50,hetero_call,xlab='Coverage',ylab='# heterozygous calls in %]',type='l')
hetero_call
for (coverage_level in 3:3)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5)) # Assuming 1 is alternative
percentage <- sum(val)*100/coverage_level
if(sum(val)>=2 & percentage<=80 & percentage>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1
}
}
}
for (coverage_level in 3:3)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5)) # Assuming 1 is alternative
percentage <- sum(val)*100/coverage_level
if (sum(val)>=2)
{browser()}
if(sum(val)>=2 & percentage<=80 & percentage>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1
}
}
}
sum(val)
sum(val)
sum(val)
rbinom(3,1,0.5)
rbinom(3,1,0.5)
rbinom(3,1,0.5)
rbinom(3,1,0.5)
rbinom(3,1,0.5)
rbinom(3,1,0.5)
rbinom(3,1,0.5)
rbinom(3,1,0.5)
200/coverage_level
val=c(T,T,F)
percentage <- sum(val)*100/coverage_level
percentage
if(sum(val)>=2 & percentage<=80 & percentage>= 20){print(2)}
ifelse(sum(val)>=2 & percentage<=80 & percentage>= 20,1,2)
ifelse(sum(val)>=2 & percentage<=80 & percentage>= 20,1,2)
ifelse(sum(val)>=2,1,2)
hetero_call <- rep(0,50)
for (coverage_level in 1:50)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5)) # Assuming 1 is alternative
percentage <- sum(val)*100/coverage_level
if(sum(val)>=2 & percentage<=80 & percentage>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1
}
}
}
hetero_call <- rep(0,50)
for (coverage_level in 1:50)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5)) # Assuming 1 is alternative
percentage <- sum(val)*100/coverage_level
if(sum(val)>=2 & percentage<=80 & percentage>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1
}
}
}
hetero_call <- rep(0,50)
for (coverage_level in 1:50)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5)) # Assuming 1 is alternative
percentage <- sum(val)*100/coverage_level
if(sum(val)>=2 & percentage<=80 & percentage>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1
}
}
}
hetero_call <- rep(0,50)
for (coverage_level in 1:50)
{
for(run in 1:100)
{
val <- as.logical(rbinom(coverage_level,1,0.5)) # Assuming 1 is alternative
percentage <- sum(val)*100/coverage_level
if(sum(val)>=2 & percentage<=80 & percentage>= 20)
{hetero_call[coverage_level]<-hetero_call[coverage_level]+1
}
}
}
hetero_call[8]
abline(h =8 ,col='red')
abline(v =8 ,col='red')
abline(v =90 ,col='blue')
plot(1:50,hetero_call,xlab='Coverage',ylab='# heterozygous calls in %]',type='l',main='heterozygous calls in relation to coverage')
abline(v =8 ,col='red')
abline(h =90 ,col='blue')
example_train_data$vascular_invasion_present
svm_model <- svm(example_train_data$vascular_invasion_present ~ ., data = example_train_data, cost = 100, gamma = 1)
colnames(example_test_data)
colnames(example_test_data)==vascular_invasion_present""
colnames(example_test_data)=="vascular_invasion_present"
which(colnames(example_test_data)=="vascular_invasion_present")
svm_pred <- predict(svm_model, example_test_data[-22])
hetero_call
